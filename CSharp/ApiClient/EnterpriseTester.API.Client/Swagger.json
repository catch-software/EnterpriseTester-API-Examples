{
  "apiVersion": "6.2.1956.0",
  "swaggerVersion": "1.1",
  "basePath": "http://etstaging01.catchsoftware.net/EnterpriseTesterMaster/",
  "apis": [
    {
      "path": "/{id}/rest/gadgets/1.0/g/feed",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGadgetFeed",
          "responseClass": "void",
          "summary": "Retrieves the feed of shared gadgets for Jira and Confluence",
          "notes": "<strong>Nickname:</strong> getGadgetFeed (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/",
      "description": "Returns root-level response listing available resources.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "listRootResources",
          "responseClass": "Resources",
          "summary": "Retrieves the list of available root-level resources.",
          "notes": "<strong>Nickname:</strong> listRootResources (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{id}",
      "description": "Agile Run resource representing an agile run entity with Enterprise Tester, this resource allows you to fetch, update and delete existing runs within an Execution Package.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRun",
          "responseClass": "AgileRun",
          "summary": "Retrieves a single agile run by its GUID Identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Steps</li>\r\n<li>Project</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> getAgileRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request is completed successfully.",
            "403": "Returned if request can not be completed due to lack of permissions or validation problems.",
            "404": "Returned if agile run does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateAgileRun",
          "responseClass": "AgileRun",
          "summary": "Updates an agile run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Steps</li>\r\n<li>Project</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> updateAgileRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAgileRun",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request is completed successfully."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAgileRun",
          "responseClass": "void",
          "summary": "Removes an agile run.",
          "notes": "<strong>Nickname:</strong> deleteAgileRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if agile run was successfully deleted."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Agile Run (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRunAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAgileRunAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Agile Run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRunRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAgileRunRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{runId}/step/{stepId}/attachment/{attachmentId}",
      "description": "Allows you to manage a single step attachment.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAgileRunStepAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from the agile run step.",
          "notes": "<strong>Nickname:</strong> deleteAgileRunStepAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "attachmentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to delete the attachment.",
            "404": "Returned if the attachment or agile run step does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{runId}/step/{stepId}/attachments",
      "description": "Agile Run Step Attachments (collection) resource for fetching attachments associated with an agile run step, or adding new attachments to the agile run step.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRunStepAttachments",
          "responseClass": "QueryResultsOfAgileRunStepAttachment",
          "summary": "Retrieves list of attachments for the agile run step.",
          "notes": "<strong>Nickname:</strong> getAgileRunStepAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to list attachments for this agile run step.",
            "404": "Returned if run or step does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAgileRunStepAttachment",
          "responseClass": "list[AgileRunStepAttachment]",
          "summary": "Upload one or more attachments for this agile run step.",
          "notes": "<strong>Nickname:</strong> createAgileRunStepAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{runId}/step/{stepId}/incident/{incidentId}",
      "description": "Allows you to manage a single incident linked to a agile run step.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRunStepIncidentLink",
          "responseClass": "AgileRunStepIncident",
          "summary": "Retrieves an an incident link belonging to a agile run step.",
          "notes": "<strong>Nickname:</strong> getAgileRunStepIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "incidentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the link.",
            "404": "Returned if agile run, step or incident do not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAgileRunStepIncidentLink",
          "responseClass": "void",
          "summary": "Removes an incident link belonging to a agile run step.",
          "notes": "<strong>Nickname:</strong> deleteAgileRunStepIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "incidentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if link was removed successfully.",
            "403": "Returned if incident link can not be removed (normally because you don't have necessary permissions).",
            "404": "Returned if agile run, step or incident do not exist."
          }
        }
      ]
    },
    {
      "path": "/api/agilerun/{runId}/step/{stepId}/incidents",
      "description": "Agile Run Step Incidents (collection) resource - used to retrieve a collection of all incidents linked to an agile run step, or to link a new incident to a step.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAgileRunStepIncidentLinks",
          "responseClass": "QueryResultsOfAgileRunStepIncident",
          "summary": "Retrieves list of incidents linked to the agile run step.",
          "notes": "<strong>Nickname:</strong> getAgileRunStepIncidentLinks (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the list of incidents associated with this agile run step.",
            "404": "Returned if agile run, step or incident does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAgileRunStepIncidentLink",
          "responseClass": "AgileRunStepIncident",
          "summary": "Create agile run step incident link.",
          "notes": "<strong>Nickname:</strong> createAgileRunStepIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "stepId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateAgileRunStepIncident",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the incident was already linked to this step.",
            "201": "Returned if link to incident was created successfully.",
            "403": "Returned if insufficient permission to link to this incident.",
            "404": "Returned if agile run, step or incident does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/agileruns",
      "description": "Agile Runs collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAgileRuns",
          "responseClass": "QueryResultsOfAgileRun",
          "summary": "Retrieves all (or a subset) of agile runs that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Steps</li>\r\n<li>Project</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> searchAgileRuns (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request is completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAgileRun",
          "responseClass": "AgileRun",
          "summary": "Creates a new agile run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Steps</li>\r\n<li>Project</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> createAgileRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAgileRun",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if agile run is created successfully."
          }
        }
      ]
    },
    {
      "path": "/api/assignedtosearch",
      "description": "Allows the searching of applicable assigned to values by partial name (including groups, users and special values such as 'Me').",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchForUsersGroupsAndSpecialUsers",
          "responseClass": "QueryResultsOfAssignedTo",
          "summary": "Searches for users, groups and special users e.g. currently logged in user (self) by partial name match",
          "notes": "<strong>Nickname:</strong> searchForUsersGroupsAndSpecialUsers (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the query request was satisfied."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchForUsersGroupsAndSpecialUsersUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for users, groups and special users e.g. currently logged in user (self) by partial name match (using POST to allow large existing value queries)",
          "notes": "<strong>Nickname:</strong> searchForUsersGroupsAndSpecialUsersUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the query request was satisfied."
          }
        }
      ]
    },
    {
      "path": "/api/attachment/{id}/contents",
      "description": "Used to retrieve the contents of an attachment.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "retrieveAttachmentContents",
          "responseClass": "void",
          "summary": "Retrieves the contents of an attachment.",
          "notes": "<strong>Nickname:</strong> retrieveAttachmentContents (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "404": "Returned if the attachment does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtest/{id}",
      "description": "Automated test resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTest",
          "responseClass": "AutomatedTest",
          "summary": "Retrieves an automated test by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Assignments</li>\r\n<li>Configuration</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "403": "Returned if the required permissions to view the automated test have not been met.",
            "404": "Returned if the automated test does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateAutomatedTest",
          "responseClass": "AutomatedTest",
          "summary": "Creates a new automated test.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Assignments</li>\r\n<li>Configuration</li></ul><br/><br/><strong>Nickname:</strong> updateAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAutomatedTest",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request is completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the automated test does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTest",
          "responseClass": "void",
          "summary": "Deletes the automated test by its unique identifier",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the automated test was deleted successfully.",
            "403": "Returned if the automated test can not be deleted (normally if the necessary permissions to complete the request have not been met, or the automated test has associated assignments).",
            "404": "Returned if the automated test package was not found."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtest/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Automated Test (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAutomatedTestAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtest/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Automated Test.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAutomatedTestRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtest/{testId}/assignments",
      "description": "Automated Test Assignments collection resource (Assignments associated with a single automated test).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAutomatedTestAssignmentsForAutomatedTest",
          "responseClass": "QueryResultsOfAutomatedTestAssignment",
          "summary": "Retrieves all (or a subset) of automated test assignments that are visible associated with the automated test.  This method takes a TQL query.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> searchAutomatedTestAssignmentsForAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "testId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "404": "Returned if the automated test does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAssignmentForAutomatedTest",
          "responseClass": "AutomatedTestAssignment",
          "summary": "Creates a new automated test assignment for this test.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> createAssignmentForAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "testId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAutomatedTestAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the automated test assignment is created successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestassignment/{id}",
      "description": "Automated Test Assignment resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestAssignment",
          "responseClass": "AutomatedTestAssignment",
          "summary": "Retrieves a single automated test assignment by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "403": "Returned if the required permission to view this automated test assignment have not been met.",
            "404": "Returned if no automated test assignment with the specified identifier exists."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateAutomatedTestAssignment",
          "responseClass": "AutomatedTestAssignment",
          "summary": "Update automated test assignment",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> updateAutomatedTestAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAutomatedTestAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the automated test assignment has been updated successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)"
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTestAssignment",
          "responseClass": "void",
          "summary": "Delete automated test assignment by it's unique Identifier",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTestAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request completed successfully",
            "403": "Returned if the required permissions to delete this automated test assignment have not been met.",
            "404": "Returned if no automated test assignment with the specified identifier exists."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestassignment/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Automated Test Assignment (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestAssignmentAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAutomatedTestAssignmentAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestassignment/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Automated Test Assignment.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestAssignmentRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getAutomatedTestAssignmentRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestassignments",
      "description": "Automated Test Assignments collection resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAutomatedTestAssignments",
          "responseClass": "QueryResultsOfAutomatedTestAssignment",
          "summary": "Retrieves all (or a subset) of automated test assignments that are visible associated with the automated test.  This method takes a TQL query.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> searchAutomatedTestAssignments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAutomatedTestAssignment",
          "responseClass": "AutomatedTestAssignment",
          "summary": "Creates a new automated test assignment.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Runs</li>\r\n<li>Package</li>\r\n<li>Totals</li>\r\n<li>AutomatedTest</li></ul><br/><br/><strong>Nickname:</strong> createAutomatedTestAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAutomatedTestAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the automated test assignment is created successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{id}",
      "description": "Automated Test Run resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRun",
          "responseClass": "AutomatedTestRun",
          "summary": "Retrieves an automated test run by ID.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Totals</li>\r\n<li>Assignment</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request)."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTestRun",
          "responseClass": "void",
          "summary": "Deletes an automated test run by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTestRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request completed successfully.",
            "403": "Returned if the required permissions to delete this automated test run have not been met.",
            "404": "Returned if no automated test run with the specified identifier exists."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{id}/testdata",
      "description": "A resource representing the data of an Automated Test Run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunData",
          "responseClass": "AutomatedTestRunDataTables",
          "summary": "Retrieves the data for a particular Automated Test Run.",
          "notes": "<strong>Nickname:</strong> getAutomatedTestRunData (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/attachment/{attachmentId}",
      "description": "A resource representing an attachment of an Automated Test Run.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTestRunAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from a particular Automated Test Run.",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTestRunAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "attachmentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the attachment was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/attachments",
      "description": "A collection resource representing the attachments of an Automated Test Run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunAttachments",
          "responseClass": "list[AutomatedTestRunAttachment]",
          "summary": "Retrieves a list of attachments for a particular Automated Test Run.",
          "notes": "<strong>Nickname:</strong> getAutomatedTestRunAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run was not found in the database."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAutomatedTestRunAttachments",
          "responseClass": "list[AutomatedTestRunAttachment]",
          "summary": "Adds a new attachment to a particular Automated Test Run.",
          "notes": "<strong>Nickname:</strong> createAutomatedTestRunAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run was not found in the database.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}",
      "description": "Represents a single automated test result node, which can be either retrieved or updated.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunNode",
          "responseClass": "ResultNode",
          "summary": "Retrieves a result node of an automated test run by node ID.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Metadata</li>\r\n<li>Parameters</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRunNode (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the node was not found in the database."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "patchAutomatedTestRunNode",
          "responseClass": "ResultNode",
          "summary": "Patches a result node of an automated test run by node ID (allows updating of the Notes field associated with a result node).",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Metadata</li>\r\n<li>Parameters</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> patchAutomatedTestRunNode (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "EditResultNode",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the node was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}/attachment/{attachmentId}",
      "description": "A resource representing an attachment of an Automated Test Run Result Node.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTestRunNodeAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from a particular Automated Test Run's Result Node.",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTestRunNodeAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "attachmentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run, node or attachment was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}/attachments",
      "description": "A collection resource representing the attachments of an Automated Test Run Result Node.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunNodeAttachments",
          "responseClass": "list[AutomatedTestRunNodeAttachment]",
          "summary": "Retrieves a list of attachments for a particular Automated Test Run's Result Node.",
          "notes": "<strong>Nickname:</strong> getAutomatedTestRunNodeAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the node was not found in the database."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAutomatedTestRunNodeAttachments",
          "responseClass": "list[AutomatedTestRunNodeAttachment]",
          "summary": "Adds a new attachment to a particular Automated Test Run's Result Node.",
          "notes": "<strong>Nickname:</strong> createAutomatedTestRunNodeAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the node was not found in the database.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}/children",
      "description": "A collection resource representing the child result ndes of an Automated Test Run Result node.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunNodeChildren",
          "responseClass": "list[ResultNode]",
          "summary": "Retrieves the children of a particular automated test run result node. This collection can optionally be filtered by outcome/status. Passing an empty GUID for the node ID will return the root nodes in a run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Metadata</li>\r\n<li>Parameters</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRunNodeChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "statuses",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "400": "Returned if the status filter included an invalid status.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or the node was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}/incident/{incidentId}",
      "description": "A resource representing an incident link of an automated test run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunNodeIncident",
          "responseClass": "AutomatedTestRunIncident",
          "summary": "Retrieves a particular incident for an automated test run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Run</li>\r\n<li>Node</li>\r\n<li>Incident</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRunNodeIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "incidentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run, node or incident was not found in the database."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteAutomatedTestRunNodeIncident",
          "responseClass": "void",
          "summary": "Deletes an incident link from a particular automated test run.",
          "notes": "<strong>Nickname:</strong> deleteAutomatedTestRunNodeIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "incidentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run, node or incident was not found in the database, or if the link didn't exist."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/node/{nodeId}/incidents",
      "description": "A collection resource representing the incident links of an automated test run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunNodeIncidents",
          "responseClass": "QueryResultsOfAutomatedTestRunIncident",
          "summary": "Retrieves the incidents for a particular automated test run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Run</li>\r\n<li>Node</li>\r\n<li>Incident</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRunNodeIncidents (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run or node was not found in the database."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAutomatedTestRunNodeIncident",
          "responseClass": "AutomatedTestRunIncident",
          "summary": "Adds an incident link to a particular automated test run.",
          "notes": "<strong>Nickname:</strong> createAutomatedTestRunNodeIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "nodeId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateAutomatedTestRunResultNodeIncident",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "400": "Returned if the POST data was incorrect.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run, node or incident was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestrun/{runId}/nodes",
      "description": "Gets the root result nodes of an Automated Test Run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAutomatedTestRunRootNodes",
          "responseClass": "list[ResultNode]",
          "summary": "Retrieves the root result nodes of an automated test run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Metadata</li>\r\n<li>Parameters</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> getAutomatedTestRunRootNodes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "runId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the ID for the run was not found in the database."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtestruns",
      "description": "Automated Test Runs collection resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAutomatedTestRuns",
          "responseClass": "QueryResultsOfAutomatedTestRun",
          "summary": "Retrieves all (or a subset) of automated test runs that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Totals</li>\r\n<li>Assignment</li></ul><br/><br/><strong>Nickname:</strong> searchAutomatedTestRuns (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request)."
          }
        }
      ]
    },
    {
      "path": "/api/automatedtests",
      "description": "Automated tests (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAutomatedTests",
          "responseClass": "QueryResultsOfAutomatedTest",
          "summary": "Retrieves all (or a subset) of automated tests that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Assignments</li>\r\n<li>Configuration</li></ul><br/><br/><strong>Nickname:</strong> searchAutomatedTests (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete request (normally due to a validation failure or the necessary permissions to complete the request were not met)."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAutomatedTest",
          "responseClass": "AutomatedTest",
          "summary": "Creates a new automated test",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Assignments</li>\r\n<li>Configuration</li></ul><br/><br/><strong>Nickname:</strong> createAutomatedTest (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateAutomatedTest",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete request (normally due to a validation failure or the necessary permissions to complete the request were not met.)"
          }
        }
      ]
    },
    {
      "path": "/api/backgroundtask/{id}",
      "description": "The Background Task resource allows you to retrieve the details of a currently executed or completed task. This includes information related to the progress (% completed) of the task.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getBackgroundTaskStatus",
          "responseClass": "BackgroundTask",
          "summary": "Retrieves the status of a running or completed job.  Note that after some time completed jobs will be flushed. At this point, this method will return a '404 Not Found' response.",
          "notes": "<strong>Nickname:</strong> getBackgroundTaskStatus (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if no job was found with the sepcified identifier."
          }
        }
      ]
    },
    {
      "path": "/api/backgroundtasks",
      "description": "Collection of background tasks",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "startBackgroundTask",
          "responseClass": "BackgroundTask",
          "summary": "Starts a new background task.",
          "notes": "<strong>Nickname:</strong> startBackgroundTask (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "dto",
              "dataType": "CreateBackgroundTask",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "202": "Returned if the task was created successfully.",
            "403": "If you do not have permission to execute this job.",
            "500": "If the job handler for this background task encountered an unrecoverable error creating the job"
          }
        }
      ]
    },
    {
      "path": "/api/customfield/{name}",
      "description": "Custom field resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getCustomField",
          "responseClass": "CustomField",
          "summary": "Retrieves a custom field by its identifier.",
          "notes": "<strong>Nickname:</strong> getCustomField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "name",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the custom field type does not exist."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "updateCustomField",
          "responseClass": "void",
          "summary": "Updates an existing custom field.",
          "notes": "<strong>Nickname:</strong> updateCustomField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "name",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "operationModel",
              "dataType": "Operation",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if it updated the custom field successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request).",
            "404": "Returned if the custom field does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteCustomField",
          "responseClass": "void",
          "summary": "Delete a custom field",
          "notes": "<strong>Nickname:</strong> deleteCustomField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "name",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if delete was successful.",
            "404": "Returned if custom field does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/customfields",
      "description": "Custom fields (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchCustomFields",
          "responseClass": "QueryResultsOfCustomField",
          "summary": "Retrieves all custom fields.",
          "notes": "<strong>Nickname:</strong> searchCustomFields (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the custom field type does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "addCustomField",
          "responseClass": "void",
          "summary": "Add a new custom field.",
          "notes": "<strong>Nickname:</strong> addCustomField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateCustomField",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the custom field is created successfully.",
            "409": "Returned if the custom field already exists."
          }
        }
      ]
    },
    {
      "path": "/api/customfieldtype/{name}",
      "description": "Custom field type resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getCustomFieldType",
          "responseClass": "CustomFieldType",
          "summary": "Retrieves a custom field type by its name.",
          "notes": "<strong>Nickname:</strong> getCustomFieldType (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "name",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the custom field type does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/customfieldtypes",
      "description": "Custom field types (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchCustomFieldTypes",
          "responseClass": "QueryResultsOfCustomFieldType",
          "summary": "Retrieves the list of custom field types.",
          "notes": "<strong>Nickname:</strong> searchCustomFieldTypes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully",
            "404": "Returned if the custom field type does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/diagnostics/performancemeasurement/latest",
      "description": "Allows retrieving of latest performance measurement",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getLastPerformanceTestResults",
          "responseClass": "void",
          "summary": "Returns results of last performance test run since server was started.",
          "notes": "<strong>Nickname:</strong> getLastPerformanceTestResults (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "export",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the report was generated successfully.",
            "403": "Returned if the user does not have permission to run diagnostic tests.",
            "404": "Returned if the performance test has not been run, or first test is still in progress."
          }
        }
      ]
    },
    {
      "path": "/api/entitytypes",
      "description": "Notification's EntityType search",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getNotificationEntityTypes",
          "responseClass": "list[Object]",
          "summary": "Retrieves all (or a subset) of projects that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> getNotificationEntityTypes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/eventtypes",
      "description": "Get all event types available for user",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getEventTypes",
          "responseClass": "list[Object]",
          "summary": "Retrieves all (or a subset) of projects that are visible to the user.",
          "notes": "<strong>Nickname:</strong> getEventTypes (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/executionpackage/{id}",
      "description": "Execution Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExecutionPackage",
          "responseClass": "ExecutionPackage",
          "summary": "Retrieves an execution package by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>AutomatedTestAssignments</li>\r\n<li>ScriptAssignments</li>\r\n<li>AgileRuns</li></ul><br/><br/><strong>Nickname:</strong> getExecutionPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if execution package was not found."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateExecutionPackage",
          "responseClass": "ExecutionPackage",
          "summary": "Update an execution package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>AutomatedTestAssignments</li>\r\n<li>ScriptAssignments</li>\r\n<li>AgileRuns</li></ul><br/><br/><strong>Nickname:</strong> updateExecutionPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateExecutionPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create execution packages in the target project.",
            "404": "Returned if the package does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteExecutionPackage",
          "responseClass": "void",
          "summary": "Deletes an execution package by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteExecutionPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if execution package was deleted successfully.",
            "403": "Returned if execution package can not be deleted (normally because required permission have not been met or the package has children but you did not pass the deleteChildren parameter.)",
            "404": "Returned if execution package was not found."
          }
        }
      ]
    },
    {
      "path": "/api/executionpackage/{id}/children",
      "description": "Execution Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExecutionPackageChildren",
          "responseClass": "QueryResultsOfExecutionPackage",
          "summary": "Retrieves the children of the execution package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>AutomatedTestAssignments</li>\r\n<li>ScriptAssignments</li>\r\n<li>AgileRuns</li></ul><br/><br/><strong>Nickname:</strong> getExecutionPackageChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create execution packages in the target project.",
            "404": "Returned if the package does not exist"
          }
        }
      ]
    },
    {
      "path": "/api/executionpackages",
      "description": "Execution Packages collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchExecutionPackages",
          "responseClass": "QueryResultsOfExecutionPackage",
          "summary": "Retrieves all (or a subset) of execution packages that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>AutomatedTestAssignments</li>\r\n<li>ScriptAssignments</li>\r\n<li>AgileRuns</li></ul><br/><br/><strong>Nickname:</strong> searchExecutionPackages (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createExecutionPackage",
          "responseClass": "ExecutionPackage",
          "summary": "Create a new execution package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>AutomatedTestAssignments</li>\r\n<li>ScriptAssignments</li>\r\n<li>AgileRuns</li></ul><br/><br/><strong>Nickname:</strong> createExecutionPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateExecutionPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create execution packages in the target project."
          }
        }
      ]
    },
    {
      "path": "/api/exportfile/{filename}",
      "description": "Used to retrieve the contents of an exported file.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExportedFileContents",
          "responseClass": "void",
          "summary": "Retrieves the contents of an exported file.",
          "notes": "<strong>Nickname:</strong> getExportedFileContents (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "filename",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the file does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/externalsourcemetadata",
      "description": "Allows the retrieval of an external source's metadata.  Metadata provides identifying information and additional field metadata which can be used when creating a new link by POSTing to the /api/externalsystemlink resource.\r\n\r\nThe metadata for external sources have an associated end - the 'Source' end is for entities within Enterprise Tester (e.g. requirement, test script and incident). \r\n\r\nThe 'Destination' end is for entities in external systems (e.g. Issues in Jira, test cases in Enterprise Architect, User stories in rally etc.).\r\n\r\nTo create a suitable link between a 'Source' and 'Destination' end, the 'Destination' end must be compatible with the 'Source' end - the metadata returned from these resources allows you to identify compatible source and destination ends via the property 'CompatibleWithSourceKeys'.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalSourceByAttributes",
          "responseClass": "ExternalSourceMetadata",
          "summary": "Retrieves an external resource identified by its attributes.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>InitialFieldValues</li></ul><br/><br/><strong>Nickname:</strong> getExternalSourceByAttributes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "end",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsourcesmetadata",
      "description": "Allows the retrieval of an external sources metadata.  Metadata provides identifying information and additional field metadata which can be used when creating a new link by POSTing to the /api/externalsystemlink resource.\r\n\r\nThe metadata for external sources have an associated end - the 'Source' end is for entities within Enterprise Tester (e.g. requirement, test script and incident). \r\n\r\nThe 'Destination' end is for entities in external systems (e.g. Issues in Jira, test cases in Enterprise Architect, User stories in rally etc.).\r\n\r\nTo create a suitable link between a 'Source' and 'Destination' end, the 'Destination' end must be compatible with the 'Source' end - the metadata returned from these resources allows you to identify compatible source and destination ends via the property 'CompatibleWithSourceKeys'.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchExternalSources",
          "responseClass": "QueryResultsOfExternalSourceMetadata",
          "summary": "Retrieves all (or a subset) of external sources.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>InitialFieldValues</li></ul><br/><br/><strong>Nickname:</strong> searchExternalSources (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "compatibleWithKey",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "end",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "compatibleWithId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystem/{id}",
      "description": "Allows the retrieval of the details for a single external system (Defect Tracker, Enterprise Architect connection etc.).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalSystem",
          "responseClass": "ExternalSystem",
          "summary": "Retrieves a single external system by its identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>FieldValues</li>\r\n<li>Widgets</li>\r\n<li>AdditionalConfigurationLinks</li></ul><br/><br/><strong>Nickname:</strong> getExternalSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system does not exist."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "patchExternalSystem",
          "responseClass": "ExternalSystem",
          "summary": "Updates the enabled state of the external system to enabled or disabled.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>FieldValues</li>\r\n<li>Widgets</li>\r\n<li>AdditionalConfigurationLinks</li></ul><br/><br/><strong>Nickname:</strong> patchExternalSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateExternalSystem",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateExternalSystem",
          "responseClass": "ExternalSystem",
          "summary": "Update the external system.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>FieldValues</li>\r\n<li>Widgets</li>\r\n<li>AdditionalConfigurationLinks</li></ul><br/><br/><strong>Nickname:</strong> updateExternalSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateExternalSystem",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteExternalSystem",
          "responseClass": "void",
          "summary": "Delete the external system.",
          "notes": "<strong>Nickname:</strong> deleteExternalSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "keepReferences",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystem/{systemId}/links",
      "description": "A collection resource which allows the search and retrieval of external system links for a specific external system (Defect Trackers and Enterprise Architect connections).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalSystemLinksForSystem",
          "responseClass": "QueryResultsOfExternalSystemLink",
          "summary": "Retrieves all (or a subset) external system links for a specific external system.",
          "notes": "<strong>Nickname:</strong> getExternalSystemLinksForSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "systemId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlink/{externalSystemLinkId}/ticket/{ticketId}",
      "description": "Allows the retrieval of a single project ticket.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getTicket",
          "responseClass": "TicketSearchResult",
          "summary": "Retrieves a single ticket by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> getTicket (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "ticketId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "externalSystemLinkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlink/{externalSystemLinkId}/ticket/{ticketId}/link",
      "description": "Allows the creation of a new incident in ET that is synchronized to a ticket in an external system (JIRA, TFS or Rally).",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "startCreateIncidentFromTicket",
          "responseClass": "BackgroundTask",
          "summary": "Creates a background task for creating an incident from an external ticket. Note: this task completes asynchronously and may take some time to complete.",
          "notes": "<strong>Nickname:</strong> startCreateIncidentFromTicket (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "ticketId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "externalSystemLinkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "202": "Returned if the task was created successfully.",
            "403": "If you do not have permission to execute this job, or the parameters are invalid"
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlink/{id}",
      "description": "Allows the retrieval of details for a single external system link (Incident, Requirement, UseCase link etc.).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalSystemLink",
          "responseClass": "ExternalSystemLink",
          "summary": "Retrieves a single external system link by its identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> getExternalSystemLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have the necessary permissions to view this external system link.",
            "404": "Returned if external system link does not exist."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "patchExternalSystemLink",
          "responseClass": "ExternalSystemLink",
          "summary": "Updates the enabled state of the external system link to enabled or disabled.",
          "notes": "<strong>Nickname:</strong> patchExternalSystemLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "EditExternalSystemLink",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system link does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteExternalSystemLink",
          "responseClass": "void",
          "summary": "Deletes the external system link and optionally removes all associated references and events.",
          "notes": "<strong>Nickname:</strong> deleteExternalSystemLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "keepReferences",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if external system link does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlink/{linkId}/copy",
      "description": "This is the resource which when POST'd to will create a copy of an existing external system link, targeting a new internal/remote project.",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "copyExternalSystemLink",
          "responseClass": "ExternalSystemLink",
          "summary": "Create a a copy of an external systems link.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> copyExternalSystemLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CopyExternalSystemLink",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlink/{linkId}/field/{fieldName}",
      "description": "Allows retrieval the allowable values for a field associated with an external system link.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getOptionsForExternalSystemLinksField",
          "responseClass": "QueryResultsOfIValue",
          "summary": "Retrieves all options for a field belonging to an external system link.",
          "notes": "<strong>Nickname:</strong> getOptionsForExternalSystemLinksField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "fieldName",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you dont not have permission to retrieve field values for this link.",
            "404": "Returned if the link does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemlinks",
      "description": "This is the collection resource for external system links. This allows the search and retrieval of a list of all or a subset of external system links (Defect Trackers, Enterprise Architect connections etc.).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchExternalSystemLinks",
          "responseClass": "QueryResultsOfExternalSystemLink",
          "summary": "Retrieves all (or a subset) of external system links.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> searchExternalSystemLinks (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createExternalSystemLink",
          "responseClass": "ExternalSystemLink",
          "summary": "Create a new external systems link.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> createExternalSystemLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateExternalSystemLink",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystems",
      "description": "This is a collection resource which allows the search and retrieval of all or a subset of external systems (Defect Trackers, Enterprise Architect connections etc.).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchExternalSystems",
          "responseClass": "QueryResultsOfExternalSystem",
          "summary": "Retrieves all (or a subset) of external systems.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>FieldValues</li>\r\n<li>Widgets</li>\r\n<li>AdditionalConfigurationLinks</li></ul><br/><br/><strong>Nickname:</strong> searchExternalSystems (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createExternalSystem",
          "responseClass": "ExternalSystem",
          "summary": "Create a new external system.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Configuration</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>FieldValues</li>\r\n<li>Widgets</li>\r\n<li>AdditionalConfigurationLinks</li></ul><br/><br/><strong>Nickname:</strong> createExternalSystem (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateExternalSystem",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemtype/{id}",
      "description": "Allows the retrieval of a single external system type.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalSystemType",
          "responseClass": "ExternalSystemType",
          "summary": "Retrieves a single external system type.",
          "notes": "<strong>Nickname:</strong> getExternalSystemType (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/externalsystemtypes",
      "description": "This is the collection resource which allows the search and retrieval of external system types.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchExternalSystemTypes",
          "responseClass": "QueryResultsOfExternalSystemType",
          "summary": "Retrieves all (or a subset) of external system types.",
          "notes": "<strong>Nickname:</strong> searchExternalSystemTypes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/gridwidget/{widgetType}/data/{dataName}",
      "description": "Allows the retrieval of data for a grid widget.",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "getGridWidgetData",
          "responseClass": "GridWidgetData",
          "summary": "Retrieves the data set for a grid widget.",
          "notes": "<strong>Nickname:</strong> getGridWidgetData (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "widgetType",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "dataName",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "GridWidgetContext",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if widget type was invalid."
          }
        }
      ]
    },
    {
      "path": "/api/gridwidgethost/{hostId}/project/{projectId}/position/{position}",
      "description": "Allows retrieval of state information for a grid widget at a specified position within a widget host for the combination of current user and a specific project.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGridWidgetState",
          "responseClass": "GridWidgetState",
          "summary": "Retrieves the states of a widget at a specified position associated with a widget host for the current user and selected project.",
          "notes": "<strong>Nickname:</strong> getGridWidgetState (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "hostId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "position",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if a position was not specified.",
            "404": "Returned if project or position does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateGridWidgetState",
          "responseClass": "GridWidgetState",
          "summary": "Sets the state of a widget at a specified position associated with a widget host for the current user and selected project.",
          "notes": "<strong>Nickname:</strong> updateGridWidgetState (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "hostId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "position",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "EditGridWidgetState",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if a position was not specified.",
            "404": "Returned if widget type was invalid."
          }
        }
      ]
    },
    {
      "path": "/api/gridwidgethost/{hostId}/project/{projectId}/positions",
      "description": "Grid widget states allow the retrieval of state information for all widgets associated with a Widget host ID.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGridWidgetStatesForHost",
          "responseClass": "GridWidgetStateSet",
          "summary": "Retrieves the states of all widgets associated with a widget host for the current user and selected project.",
          "notes": "<strong>Nickname:</strong> getGridWidgetStatesForHost (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "hostId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/group/{groupId}/permissions/project/{projectId}",
      "description": "Project Group Permissions resource - allows the retrieval of the collection of permissions directly associated with a group for a project, or updating the permissions associated with a project group.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGroupProjectPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Retrieves the project permissions for this group",
          "notes": "<strong>Nickname:</strong> getGroupProjectPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "groupId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the group does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateGroupProjectPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Sets the project permissions for this group",
          "notes": "<strong>Nickname:</strong> updateGroupProjectPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "groupId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "assignments",
              "dataType": "list[CreateOrUpdatePermissionAssignment]",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if one or more permissions could not be resolved.",
            "404": "Returned if the group or project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/group/{id}",
      "description": "Allows the retrieval of details for an individual group.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGroup",
          "responseClass": "Group",
          "summary": "Retrieves a single group by ID.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> getGroup (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if user does not exists."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateGroup",
          "responseClass": "Group",
          "summary": "Updates an existing group",
          "notes": "<strong>Nickname:</strong> updateGroup (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateGroup",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request contained invalid data or would cause a conflict with an existing group record.",
            "404": "Returned if group does not exists."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteGroup",
          "responseClass": "void",
          "summary": "Deletes an existing group",
          "notes": "<strong>Nickname:</strong> deleteGroup (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request could not be completed.",
            "404": "Returned if group does not exists."
          }
        }
      ]
    },
    {
      "path": "/api/group/{id}/permissions/global",
      "description": "Global Group Permissions resource - allows the retrieval of the collection of global permissions directly associated with a group, or updating the permissions associated with a group.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGlobalGroupPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Retrieves the global permissions for this group",
          "notes": "<strong>Nickname:</strong> getGlobalGroupPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the group does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateGlobalGroupPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Sets the global permissions for this group",
          "notes": "<strong>Nickname:</strong> updateGlobalGroupPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "assignments",
              "dataType": "list[CreateOrUpdatePermissionAssignment]",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if one or more permissions could not be resolved.",
            "404": "Returned if the group does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/group/{id}/permissions/projects",
      "description": "Returns links to the set of project group permissions resources",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProjectGroupPermissionLinks",
          "responseClass": "GroupPermissionProjects",
          "summary": "Retrieves a set of links, one for each project, which can be used to manage the project group permissions for this group.",
          "notes": "<strong>Nickname:</strong> getProjectGroupPermissionLinks (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the group does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/group/{id}/users",
      "description": "Collection resource of users belonging to a group.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGroupMembers",
          "responseClass": "QueryResultsOfUser",
          "summary": "Retrieves all (or a subset) of users in a group.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> getGroupMembers (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if group does not exist"
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "setGroupMembers",
          "responseClass": "QueryResultsOfUser",
          "summary": "Sets the users that are members of the group.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> setGroupMembers (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "GroupMemberships",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if group does not exist"
          }
        }
      ]
    },
    {
      "path": "/api/groups",
      "description": "Allows the search and retrieval of groups.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchGroups",
          "responseClass": "QueryResultsOfGroup",
          "summary": "Retrieves all (or a subset) of groups.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> searchGroups (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createGroup",
          "responseClass": "Group",
          "summary": "Create a new group",
          "notes": "<strong>Nickname:</strong> createGroup (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateGroup",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request contained invalid data or would cause a conflict with an existing group record.",
            "404": "Returned if group does not exists."
          }
        }
      ]
    },
    {
      "path": "/api/groupssearch",
      "description": "Allows the searching of groups by partial match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchGroupsByPartialName",
          "responseClass": "QueryResultsOfGroup",
          "summary": "Searches for groups by partial name match",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> searchGroupsByPartialName (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the group request was able to be satisfied."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchGroupsByPartialNameUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for groups by partial name match (using POST to allow large existing value queries)",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> searchGroupsByPartialNameUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the group request was able to be satisfied."
          }
        }
      ]
    },
    {
      "path": "/api/incident/{id}",
      "description": "Incident resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getIncident",
          "responseClass": "Incident",
          "summary": "Retrieves a single incident by its unique Identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Project</li>\r\n<li>LastComment</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>Resolution</li>\r\n<li>Components</li>\r\n<li>FixedVersions</li>\r\n<li>AffectedVersions</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>ExternalKeys</li>\r\n<li>Comments</li>\r\n<li>Attachments</li></ul><br/><br/><strong>Nickname:</strong> getIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this incident",
            "404": "Returned if no incident with that identifier exists"
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "updateIncidentFields",
          "responseClass": "void",
          "summary": "Updates an existing incident.",
          "notes": "<strong>Nickname:</strong> updateIncidentFields (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "operationModel",
              "dataType": "Operation",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if it updated the incident successfully",
            "403": "Returned if ET could not complete request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the incident does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateIncident",
          "responseClass": "Incident",
          "summary": "Updates an existing incident.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Project</li>\r\n<li>LastComment</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>Resolution</li>\r\n<li>Components</li>\r\n<li>FixedVersions</li>\r\n<li>AffectedVersions</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>ExternalKeys</li>\r\n<li>Comments</li>\r\n<li>Attachments</li></ul><br/><br/><strong>Nickname:</strong> updateIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateIncident",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete request (normally due to a validation failure or the necessary permissions to complete the request have not been met).",
            "404": "Returned if the incident does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteIncident",
          "responseClass": "void",
          "summary": "Delete a incident.",
          "notes": "<strong>Nickname:</strong> deleteIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the permissions required to delete the incident have not been met.",
            "404": "Returned if incident does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/incident/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Incident (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getIncidentAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getIncidentAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/incident/{id}/attachments",
      "description": "Incident Attachments (collection) resource for fetching attachments associated with a Incident, or adding new attachments to the Incident.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getIncidentAttachments",
          "responseClass": "QueryResultsOfIncidentAttachment",
          "summary": "Retrieves list of attachments for the Incident.",
          "notes": "<strong>Nickname:</strong> getIncidentAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to retrieve attachments.",
            "404": "Returned if the Incident was not found."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createIncidentAttachment",
          "responseClass": "list[IncidentAttachment]",
          "summary": "Upload one or more attachments for this Incident.",
          "notes": "<strong>Nickname:</strong> createIncidentAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/incident/{id}/comments",
      "description": "Incident comment collection resource, provides the ability to retrieve all or a subset of comments associated with an incident.  Currently to add new comments to an incident, you must update the incident and include a 'Comments' child collection (see the Incident resource examples for more details).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getIncidentComments",
          "responseClass": "QueryResultsOfIncidentComment",
          "summary": "Retrieves all (or a subset) of an incident's comments.",
          "notes": "<strong>Nickname:</strong> getIncidentComments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you don't have permission to view this incident",
            "404": "Returned if the incident does not exist"
          }
        }
      ]
    },
    {
      "path": "/api/incident/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Incident.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getIncidentRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getIncidentRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/incident/{incidentId}/attachment/{id}",
      "description": "Allows you to manage a single attachment for a Incident.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteIncidentAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from the Incident.",
          "notes": "<strong>Nickname:</strong> deleteIncidentAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "incidentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to delete the attachment.",
            "404": "Returned if the attachment or Incident does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/incidents",
      "description": "Incidents collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchIncidents",
          "responseClass": "QueryResultsOfIncident",
          "summary": "Retrieves all (or a subset) of incidents that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Project</li>\r\n<li>LastComment</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>Resolution</li>\r\n<li>Components</li>\r\n<li>FixedVersions</li>\r\n<li>AffectedVersions</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>ExternalKeys</li>\r\n<li>Comments</li>\r\n<li>Attachments</li></ul><br/><br/><strong>Nickname:</strong> searchIncidents (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or the necessary permissions to complete the request have not been met)."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createIncident",
          "responseClass": "Incident",
          "summary": "Creates a new test incident.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Project</li>\r\n<li>LastComment</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>Resolution</li>\r\n<li>Components</li>\r\n<li>FixedVersions</li>\r\n<li>AffectedVersions</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>ExternalKeys</li>\r\n<li>Comments</li>\r\n<li>Attachments</li></ul><br/><br/><strong>Nickname:</strong> createIncident (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateIncident",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/mailqueue/messages",
      "description": "Allows the retrieval of messages awaiting delivery in the mail queue (collection resource)",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getQueuedMailMessages",
          "responseClass": "QueryResultsOfQueuedMessage",
          "summary": "Retrieves mail messages queued for delivery.",
          "notes": "<strong>Nickname:</strong> getQueuedMailMessages (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to retrieve items in the mail queue."
          }
        }
      ]
    },
    {
      "path": "/api/mailsender/default/settings",
      "description": "Allows the retrieval of the mail sender (using SMTP) settings that Enterprise Tester will use when sending e-mail notifications.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getMailSenderSettings",
          "responseClass": "MailSenderSettings",
          "summary": "Retrieves default mail sender settings.",
          "notes": "<strong>Nickname:</strong> getMailSenderSettings (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to retrieve the mail sender settings."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateMailSenderSettings",
          "responseClass": "MailSenderSettings",
          "summary": "Updates default mail sender settings",
          "notes": "<strong>Nickname:</strong> updateMailSenderSettings (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateMailSenderSettings",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to update the mail sender settings."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{id}",
      "description": "Resource representing a single organisation.  Currently Enterprise Tester only supports a single organisation, so the unique orgranisation identifier can be omitted to return the default project when interacting with this resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getOrganisation",
          "responseClass": "Organisation",
          "summary": "Retrieves information about a single organisation.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>RelationshipTypes</li>\r\n<li>Projects</li>\r\n<li>ProjectCategories</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li></ul><br/><br/><strong>Nickname:</strong> getOrganisation (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if organisation was not found."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateOrganisation",
          "responseClass": "Organisation",
          "summary": "Update details for an organisation.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>RelationshipTypes</li>\r\n<li>Projects</li>\r\n<li>ProjectCategories</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li></ul><br/><br/><strong>Nickname:</strong> updateOrganisation (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateOrganisation",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request can not be satisified (invalid values, or insufficient permissions).",
            "404": "Returned if organisation was not found."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "startDeleteOrganisation",
          "responseClass": "void",
          "summary": "Start a background task to delete a organisation",
          "notes": "<strong>Nickname:</strong> startDeleteOrganisation (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "202": "Returned if the task was started successfully.",
            "404": "Returned if project was not found."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{id}/relationshiptype/{key}",
      "description": "Allows retrieving of details for a single relationship type belonging to an organisation.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRelationshipTypesByKey",
          "responseClass": "RelationshipType",
          "summary": "Retrieves all relationship types",
          "notes": "<strong>Nickname:</strong> getRelationshipTypesByKey (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{id}/relationshiptype/{key}/relationships",
      "description": "Relationships (Collection) resource - allows the creation of new relationships via a POST request",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "createRelationship",
          "responseClass": "Relationship",
          "summary": "Create new relationship.",
          "notes": "<strong>Nickname:</strong> createRelationship (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateRelationship",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if organisation does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{id}/relationshiptypes",
      "description": "Allows retrieving of all relationship types associated with a single organisation.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRelationshipTypes",
          "responseClass": "QueryResultsOfRelationshipType",
          "summary": "Retrieves all relationship types",
          "notes": "<strong>Nickname:</strong> getRelationshipTypes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the organisation does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{organisationId}/picklist/{type}",
      "description": "Used to retrieve the picklist values associated with an organisation (values which are copied/inherited into new projects)",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getOrganisationPicklistValues",
          "responseClass": "QueryResultsOfPicklist",
          "summary": "Retrieve picklist values for the organisation.",
          "notes": "<strong>Nickname:</strong> getOrganisationPicklistValues (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "404": "Returned if the organisation does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{organisationId}/picklistsearch/{type}",
      "description": "Allows the searching of picklist values for an organisation by partial name match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchOrganisationPicklistValues",
          "responseClass": "QueryResultsOfPicklist",
          "summary": "Searches for picklist values by partial name match",
          "notes": "<strong>Nickname:</strong> searchOrganisationPicklistValues (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "403": "Returned if the user does not have permission to view picklist values for this project.",
            "404": "Returned if the organisation does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchOrganisationPicklistValuesUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for picklist values by partial name match (using POST to allow large existing value queries)",
          "notes": "<strong>Nickname:</strong> searchOrganisationPicklistValuesUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "403": "Returned if the user does not have permission to view picklist values for this project.",
            "404": "Returned if the organisation does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/organisation/{organisationId}/relationshiptype/{key}/relationship/{id}",
      "description": "Relationship resource - allows the retrieval, update and deletion of a single relationship",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRelationship",
          "responseClass": "Relationship",
          "summary": "Retrieve a relationship (does not include it's children)",
          "notes": "<strong>Nickname:</strong> getRelationship (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request was completed successfully",
            "403": "Returned if you have insufficient permissions to retrieve this relationship.",
            "404": "Returned if organisation or relationship does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateRelationship",
          "responseClass": "Relationship",
          "summary": "Update the direction of a relationship",
          "notes": "<strong>Nickname:</strong> updateRelationship (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "UpdateRelationship",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to update the relationship.",
            "404": "Returned if organisation or relationship does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteRelationship",
          "responseClass": "void",
          "summary": "Delete relationship.",
          "notes": "<strong>Nickname:</strong> deleteRelationship (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "organisationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "key",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request was completed successfully",
            "403": "Returned if you have insufficient permissions to delete this relationship.",
            "404": "Returned if organisation or relationship does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/organisations",
      "description": "Organisations (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchOrganisations",
          "responseClass": "QueryResultsOfOrganisation",
          "summary": "Retrieves a list of all organisations.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>RelationshipTypes</li>\r\n<li>Projects</li>\r\n<li>ProjectCategories</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li></ul><br/><br/><strong>Nickname:</strong> searchOrganisations (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createOrganisation",
          "responseClass": "void",
          "summary": "Create a new organisation.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>RelationshipTypes</li>\r\n<li>Projects</li>\r\n<li>ProjectCategories</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li></ul><br/><br/><strong>Nickname:</strong> createOrganisation (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateOrganisation",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if request can not be satisified (invalid values, or insufficient permissions)."
          }
        }
      ]
    },
    {
      "path": "/api/permission/{id}",
      "description": "Permission resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getPermission",
          "responseClass": "Permission",
          "summary": "Retrieves a permission by it's unique ID.",
          "notes": "<strong>Nickname:</strong> getPermission (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/permissions",
      "description": "Permissions (collection) resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAllPermissions",
          "responseClass": "QueryResultsOfPermission",
          "summary": "Retrieves list of permissions (including all child permissions).",
          "notes": "<strong>Nickname:</strong> getAllPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/project/{id}",
      "description": "Represents a project within Enterprise Tester",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProject",
          "responseClass": "Project",
          "summary": "Retrieves information about a single project",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> getProject (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this project."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateProject",
          "responseClass": "Project",
          "summary": "Update an existing project.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> updateProject (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateProject",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the project was updated successfully.",
            "403": "Returned if the user does not have permission to update a project.",
            "404": "Returned if the project does not exist.",
            "409": "Returned if the name for the project is in use (if attempting to rename the project)."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "startProjectDelete",
          "responseClass": "void",
          "summary": "Start a background task to delete a project",
          "notes": "<strong>Nickname:</strong> startProjectDelete (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "202": "Returned if the task was started successfully.",
            "404": "Returned if project was not found."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/assignees",
      "description": "Allows the searching of available assignees for a project (results are sorted alphabetically).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjectAssignees",
          "responseClass": "QueryResultsOfUser",
          "summary": "Searches for assignees by partial name match",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> searchProjectAssignees (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied.",
            "404": "Returned if project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/picklist/{type}",
      "description": "Used to retrieve the picklist values associated with a project",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProjectPicklistValues",
          "responseClass": "QueryResultsOfPicklist",
          "summary": "Retrieve picklist values specific to a project.",
          "notes": "<strong>Nickname:</strong> getProjectPicklistValues (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "403": "Returned if the user does not have permission to view picklist values for this project.",
            "404": "Returned if the project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/picklistsearch/{type}",
      "description": "Allows the searching of picklist values for an project by partial name match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjectPicklistValues",
          "responseClass": "QueryResultsOfPicklist",
          "summary": "Searches for picklist values by partial name match",
          "notes": "<strong>Nickname:</strong> searchProjectPicklistValues (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "403": "Returned if the user does not have permission to view picklist values for this project.",
            "404": "Returned if the project does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchProjectPicklistValuesUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for picklist values by partial name match",
          "notes": "<strong>Nickname:</strong> searchProjectPicklistValuesUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "type",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the picklist values were retrieved successfully.",
            "403": "Returned if the user does not have permission to view picklist values for this project.",
            "404": "Returned if the project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/searchlinks",
      "description": "Allows the searching of all external systems for a project by partial match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjectExternalLinksByPartialName",
          "responseClass": "QueryResultsOfExternalSystemLink",
          "summary": "Searches for externa links by partial name match",
          "notes": "<strong>Nickname:</strong> searchProjectExternalLinksByPartialName (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchProjectExternalLinksByPartialNameUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for external links by partial name match (using POST to allow large existing value queries).",
          "notes": "<strong>Nickname:</strong> searchProjectExternalLinksByPartialNameUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/tickets",
      "description": "Allows the searching of tickets in external systems",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchTickets",
          "responseClass": "QueryResultsOfTicketSearchResult",
          "summary": "Retrieves tickets for a project via a query",
          "notes": "<strong>Expanders:</strong><br/><ul><li>ExternalSystem</li></ul><br/><br/><strong>Nickname:</strong> searchTickets (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "q",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/project/{projectId}/widgets",
      "description": "Retrieve widget information required to create a new entity within a project",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getWidgetsForProject",
          "responseClass": "EntityTypeWidgets",
          "summary": "Retrieves widget information required to construct a create screen for an entity within a project.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Incident</li>\r\n<li>Requirement</li>\r\n<li>TestScript</li>\r\n<li>AgileRun</li>\r\n<li>ScriptRun</li></ul><br/><br/><strong>Nickname:</strong> getWidgetsForProject (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/projectcategories",
      "description": "Project Categories (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchAllProjectCategories",
          "responseClass": "QueryResultsOfProjectCategory",
          "summary": "Retrieves a list of all project categories.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Projects</li>\r\n<li>Parent</li>\r\n<li>Organisation</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> searchAllProjectCategories (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createProjectCategory",
          "responseClass": "ProjectCategory",
          "summary": "Create a new project category.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Projects</li>\r\n<li>Parent</li>\r\n<li>Organisation</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> createProjectCategory (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateProjectCategory",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the project category was created successfully.",
            "403": "Returned if the project category could not be created (due to lack of permissions or an invalid json request).",
            "409": "Returned if the project category name is already in use."
          }
        }
      ]
    },
    {
      "path": "/api/projectcategory/{id}",
      "description": "Project Category resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProjectCategory",
          "responseClass": "ProjectCategory",
          "summary": "Retrieves a project category by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Projects</li>\r\n<li>Parent</li>\r\n<li>Organisation</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> getProjectCategory (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if project category does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateProjectCategory",
          "responseClass": "ProjectCategory",
          "summary": "Update a project category.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Projects</li>\r\n<li>Parent</li>\r\n<li>Organisation</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> updateProjectCategory (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateProjectCategory",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Update a project category.",
            "403": "Returned if project category could not be updated (due to lack of permissions or an invalid json request).",
            "404": "Returned if project category does not exist.",
            "409": "Returned if project category name is already in use."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteProjectCategory",
          "responseClass": "void",
          "summary": "Delete a project category (removing a project category does not remove the projects beneath it, these will instead be moved directly beneath the organisation).",
          "notes": "<strong>Nickname:</strong> deleteProjectCategory (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Project category deleted successfully.",
            "403": "Returned if project category could not be deleted (normally due to lack of permissions).",
            "404": "Returned if project category does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/projectcategory/{id}/children",
      "description": "Project Category Children (collection) resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProjectCategoriesChildren",
          "responseClass": "QueryResultsOfProjectCategory",
          "summary": "Retrieves a list of all child project categories for a project category.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Projects</li>\r\n<li>Parent</li>\r\n<li>Organisation</li>\r\n<li>Children</li></ul><br/><br/><strong>Nickname:</strong> getProjectCategoriesChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "404": "Returned if project category does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/projects",
      "description": "Projects collection resource, allowing the search and retrieval of all visible projects.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjects",
          "responseClass": "QueryResultsOfProject",
          "summary": "Retrieves all (or a subset) of projects that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> searchProjects (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createProject",
          "responseClass": "Project",
          "summary": "Create a new project.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> createProject (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateProject",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the new project was created successfully.",
            "403": "Returned if the user does not have permission to create a project.",
            "409": "Returned if the projects name is already in use."
          }
        }
      ]
    },
    {
      "path": "/api/projectssearch",
      "description": "Projects search resource, allowing the search for a project by a partial name.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjectsByPartialName",
          "responseClass": "QueryResultsOfProject",
          "summary": "Retrieves all (or a subset) of projects that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> searchProjectsByPartialName (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchProjectsByPartialNameUsingPostMethod",
          "responseClass": "void",
          "summary": "Retrieves all (or a subset) of projects that are visible to the user (using POST to allow large existing value queries).",
          "notes": "<strong>Expanders:</strong><br/><ul><li>TimeTrackingConfiguration</li>\r\n<li>ProjectCategory</li>\r\n<li>Statuses</li>\r\n<li>Priorities</li>\r\n<li>RequirementTypes</li>\r\n<li>RequirementStatuses</li>\r\n<li>RequirementDifficulties</li>\r\n<li>IncidentTypes</li>\r\n<li>TestTypes</li>\r\n<li>IncidentResolutions</li>\r\n<li>IncidentStatuses</li>\r\n<li>Versions</li>\r\n<li>Components</li>\r\n<li>ExecutionPackages</li>\r\n<li>ScriptPackages</li>\r\n<li>RequirementPackages</li>\r\n<li>ExternalSystemLinks</li>\r\n<li>Widgets</li></ul><br/><br/><strong>Nickname:</strong> searchProjectsByPartialNameUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/projecttemplates",
      "description": "Project templates that can be used when creating a new project to pre-populate the project with data.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchProjectTemplates",
          "responseClass": "QueryResultsOfProjectTemplate",
          "summary": "Retrieves all (or a subset) of project templates that are visible to the user.",
          "notes": "<strong>Nickname:</strong> searchProjectTemplates (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/relationshiptypes",
      "description": "Allows retrieving of all registered relationship types.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAllRelationshipTypes",
          "responseClass": "QueryResultsOfRelationshipType",
          "summary": "Retrieves all relationship types",
          "notes": "<strong>Nickname:</strong> getAllRelationshipTypes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}",
      "description": "Requirement resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirement",
          "responseClass": "Requirement",
          "summary": "Retrieves a single requirement by its unique Identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Children</li>\r\n<li>Attachments</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>DifficultyLevel</li></ul><br/><br/><strong>Nickname:</strong> getRequirement (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this requirement.",
            "404": "Returned if no requirement with that identifier exists."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "updateExistingRequirementFields",
          "responseClass": "void",
          "summary": "Updates an existing requirement.",
          "notes": "<strong>Nickname:</strong> updateExistingRequirementFields (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "operationModel",
              "dataType": "Operation",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if it updated the requirement successfully.",
            "403": "Returned if ET did not complete request (normally due to a validation failure or invalid permissions to complete the request).",
            "404": "Returned if the requirement does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateExistingRequirement",
          "responseClass": "Requirement",
          "summary": "Updates an existing requirement.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Children</li>\r\n<li>Attachments</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>DifficultyLevel</li></ul><br/><br/><strong>Nickname:</strong> updateExistingRequirement (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateRequirement",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET did not complete request (normally due to a validation failure or invalid permissions to complete the request).",
            "404": "Returned if the requirement does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteRequirement",
          "responseClass": "void",
          "summary": "Delete a requirement.",
          "notes": "<strong>Nickname:</strong> deleteRequirement (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you don not have the permissions required to delete the requirement.",
            "404": "Returned if the requirement does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Requirement (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getRequirementAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}/attachments",
      "description": "Requirement Attachments (collection) resource for fetching attachments associated with a requirement, or adding new attachments to the requirement.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementAttachments",
          "responseClass": "QueryResultsOfRequirementAttachment",
          "summary": "Retrieves list of attachments for the requirement.",
          "notes": "<strong>Nickname:</strong> getRequirementAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to retrieve attachments.",
            "404": "Returned if the requirement was not found."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createRequirementAttachment",
          "responseClass": "list[RequirementAttachment]",
          "summary": "Upload one or more attachments for this requirement.",
          "notes": "<strong>Nickname:</strong> createRequirementAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}/children",
      "description": "Requirement children collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementsChildren",
          "responseClass": "QueryResultsOfRequirement",
          "summary": "Retrieves all (or a subset) of child requirements that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Children</li>\r\n<li>Attachments</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>DifficultyLevel</li></ul><br/><br/><strong>Nickname:</strong> getRequirementsChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met)."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}/comments",
      "description": "Allows the retrieval of external comments associated with any tickets this requirement has been synchronized with.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getExternalTicketComments",
          "responseClass": "QueryResultsOfExternalSystemComment",
          "summary": "Retrieves all (or a subset) of external ticket comments associated with this requirement.",
          "notes": "<strong>Nickname:</strong> getExternalTicketComments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this requirement's comments.",
            "404": "Returned if requirement does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Requirement.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getRequirementRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirement/{requirementId}/attachment/{id}",
      "description": "Allows you to manage a single attachment for a requirement.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteRequirementAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from the requirement.",
          "notes": "<strong>Nickname:</strong> deleteRequirementAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "requirementId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to delete the attachment.",
            "404": "Returned if the attachment or requirement does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirementpackage/{id}",
      "description": "Requirement Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementPackage",
          "responseClass": "RequirementPackage",
          "summary": "Retrieves a requirement package by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Requirements</li></ul><br/><br/><strong>Nickname:</strong> getRequirementPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateRequirementPackage",
          "responseClass": "RequirementPackage",
          "summary": "Update a requirement package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Requirements</li></ul><br/><br/><strong>Nickname:</strong> updateRequirementPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateRequirementPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create requirement packages in the target project.",
            "404": "Returned if the package does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteRequirementPackage",
          "responseClass": "void",
          "summary": "Deletes a requirement package by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteRequirementPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the requirement package was deleted successfully.",
            "403": "Returned if the requirement package can not be deleted (normally because the required permissions have not been met, or the package has children but you did not pass the deleteChildren parameter).",
            "404": "Returned if the requirement package was not found."
          }
        }
      ]
    },
    {
      "path": "/api/requirementpackage/{id}/children",
      "description": "Requirement Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementPackageChildren",
          "responseClass": "QueryResultsOfRequirementPackage",
          "summary": "Retrieves the children of the requirement package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Requirements</li></ul><br/><br/><strong>Nickname:</strong> getRequirementPackageChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create requirement packages in the target project.",
            "404": "Returned if the package does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/requirementpackages",
      "description": "Requirement Packages collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getRequirementPackages",
          "responseClass": "QueryResultsOfRequirementPackage",
          "summary": "Retrieves all (or a subset of) requirement packages that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Requirements</li></ul><br/><br/><strong>Nickname:</strong> getRequirementPackages (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createRequirementPackage",
          "responseClass": "RequirementPackage",
          "summary": "Create a new requirement package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Requirements</li></ul><br/><br/><strong>Nickname:</strong> createRequirementPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateRequirementPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create requirement packages in the target project."
          }
        }
      ]
    },
    {
      "path": "/api/requirements",
      "description": "Requirements collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchRequirements",
          "responseClass": "QueryResultsOfRequirement",
          "summary": "Retrieves all (or a subset) of requirements that are visible.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Children</li>\r\n<li>Attachments</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>DifficultyLevel</li></ul><br/><br/><strong>Nickname:</strong> searchRequirements (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET could not complete the request (normally due to a validation failure or the necessary permissions to complete the request have not been met)."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createRequirement",
          "responseClass": "Requirement",
          "summary": "Creates a new requirement.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Children</li>\r\n<li>Attachments</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li>\r\n<li>DifficultyLevel</li></ul><br/><br/><strong>Nickname:</strong> createRequirement (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateRequirement",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/script/{id}",
      "description": "Script resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScript",
          "responseClass": "Script",
          "summary": "Retrieves a single script by its unique Identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Assignments</li>\r\n<li>Attachments</li>\r\n<li>Steps</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> getScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this script.",
            "404": "Returned if no script with that identifier exists."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "updateScriptCustomField",
          "responseClass": "void",
          "summary": "Updates an existing custom field.",
          "notes": "<strong>Nickname:</strong> updateScriptCustomField (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "operationModel",
              "dataType": "Operation",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if it updated the script successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request).",
            "404": "Returned if the script does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateScript",
          "responseClass": "Script",
          "summary": "Updates an existing script.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Assignments</li>\r\n<li>Attachments</li>\r\n<li>Steps</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> updateScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScript",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request).",
            "404": "Returned if the script does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteScript",
          "responseClass": "void",
          "summary": "Delete a script.",
          "notes": "<strong>Nickname:</strong> deleteScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you don't have the permissions required to delete the script.",
            "404": "Returned if script does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/script/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Script (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getScriptAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/script/{id}/attachments",
      "description": "Script Attachments (collection) resource for fetching attachments associated with a script, or adding new attachments to the script.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptAttachments",
          "responseClass": "QueryResultsOfScriptAttachment",
          "summary": "Retrieves list of attachments for the script.",
          "notes": "<strong>Nickname:</strong> getScriptAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to retrieve attachments.",
            "404": "Returned if the script was not found."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createScriptAttachment",
          "responseClass": "list[ScriptAttachment]",
          "summary": "Upload one or more attachments for this script.",
          "notes": "<strong>Nickname:</strong> createScriptAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/script/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Script.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getScriptRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/script/{scriptId}/assignments",
      "description": "Script Assignments collection resource (for a single script)",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getAssignmentsForScript",
          "responseClass": "QueryResultsOfScriptAssignment",
          "summary": "Retrieves all (or a subset) of script assignments that are visible.  This method takes a TQL query.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> getAssignmentsForScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "scriptId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createAssignmentForScript",
          "responseClass": "ScriptAssignment",
          "summary": "Creates a new test script assignment.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> createAssignmentForScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "scriptId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScriptAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the script assignment was created successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)."
          }
        }
      ]
    },
    {
      "path": "/api/script/{scriptId}/attachment/{id}",
      "description": "Allows you to manage a single attachment for a script.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteScriptAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from the script.",
          "notes": "<strong>Nickname:</strong> deleteScriptAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "scriptId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to delete the attachment.",
            "404": "Returned if the attachment or script does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/scriptassignment/{id}",
      "description": "Script Assignment resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptAssignment",
          "responseClass": "ScriptAssignment",
          "summary": "Retrieves a single script assignment by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> getScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this script assignment.",
            "404": "Returned if no script assignment with that identifier exists."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateScriptAssignment",
          "responseClass": "ScriptAssignment",
          "summary": "Update script assignment",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> updateScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScriptAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the script assignment was updated successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteScriptAssignment",
          "responseClass": "void",
          "summary": "Deletes a single script assignment by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to delete this script assignment.",
            "404": "Returned if no script assignment with that identifier exists."
          }
        }
      ]
    },
    {
      "path": "/api/scriptassignment/{id}/allrelationships",
      "description": "A resource representing the set of relationships belonging to the Script Assignment (includes the full graph of related entities, not just those which can be reached through destination and source->destination directed relationships).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptAssignmentAllRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getScriptAssignmentAllRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/scriptassignment/{id}/relationships",
      "description": "A resource representing the set of relationships belonging to the Script Assignment.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptAssignmentRelationships",
          "responseClass": "Relationship",
          "summary": "Retrieves all relationships",
          "notes": "<strong>Nickname:</strong> getScriptAssignmentRelationships (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the relationships associated with this entity.",
            "404": "Returned if the entity does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/scriptassignment/{id}/runs",
      "description": "Runs collection resource associated with a script assignment, can be used to retrieve a list of existing runs or to create a new run.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchScriptRunsForScriptAssignment",
          "responseClass": "QueryResultsOfScriptRun",
          "summary": "Retrieves all (or a subset) of script runs for a script assignment.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>StepResults</li>\r\n<li>Assignment</li>\r\n<li>Widgets</li>\r\n<li>FieldValues</li></ul><br/><br/><strong>Nickname:</strong> searchScriptRunsForScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this script assignment's runs.",
            "404": "Returned if the script assignment does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createScriptRunForScriptAssignment",
          "responseClass": "ScriptRun",
          "summary": "Create a new run, or retrieves the existing incomplete run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>StepResults</li>\r\n<li>Assignment</li>\r\n<li>Widgets</li>\r\n<li>FieldValues</li></ul><br/><br/><strong>Nickname:</strong> createScriptRunForScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateNewRun",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the existing run was returned.",
            "201": "Returned if a new run was created.",
            "403": "Returned if you do not have permission to create a new run.",
            "404": "Returned if the script assignment does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/scriptassignments",
      "description": "Script Assignments collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchScriptAssignments",
          "responseClass": "QueryResultsOfScriptAssignment",
          "summary": "Retrieves all (or a subset) of script assignments that are visible.  This method takes a TQL query.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> searchScriptAssignments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createScriptAssignment",
          "responseClass": "ScriptAssignment",
          "summary": "Creates a new test script assignment.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Package</li>\r\n<li>Runs</li>\r\n<li>LastRun</li>\r\n<li>Script</li></ul><br/><br/><strong>Nickname:</strong> createScriptAssignment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScriptAssignment",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the script assignment was created successfully.",
            "403": "Returned if the request could not be completed successfuly (normally due to lack of permissions or validation failure)."
          }
        }
      ]
    },
    {
      "path": "/api/scriptpackage/{id}",
      "description": "Script Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptPackage",
          "responseClass": "ScriptPackage",
          "summary": "Retrieves a script package by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Scripts</li></ul><br/><br/><strong>Nickname:</strong> getScriptPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateScriptPackage",
          "responseClass": "ScriptPackage",
          "summary": "Update a script package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Scripts</li></ul><br/><br/><strong>Nickname:</strong> updateScriptPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScriptPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create script packages in the target project.",
            "404": "Returned if the package does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteScriptPackage",
          "responseClass": "void",
          "summary": "Deletes a script package by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteScriptPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the script package was deleted successfully.",
            "403": "Returned if script package can not be deleted (normally because you don't have permission, or the package has children but you did not pass the deleteChildren parameter).",
            "404": "Returned if the script package was not found."
          }
        }
      ]
    },
    {
      "path": "/api/scriptpackage/{id}/children",
      "description": "Script Package resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptPackagesChildren",
          "responseClass": "QueryResultsOfScriptPackage",
          "summary": "Retrieves the children of the script package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Scripts</li></ul><br/><br/><strong>Nickname:</strong> getScriptPackagesChildren (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create script packages in the target project.",
            "404": "Returned if the package does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/scriptpackages",
      "description": "Script Packages collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchScriptPackages",
          "responseClass": "QueryResultsOfScriptPackage",
          "summary": "Retrieves all (or a subset) of script packages that are visible to the user.  This method takes a TQL query.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Scripts</li></ul><br/><br/><strong>Nickname:</strong> searchScriptPackages (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createScriptPackage",
          "responseClass": "ScriptPackage",
          "summary": "Create a new script package.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Children</li>\r\n<li>Parent</li>\r\n<li>Project</li>\r\n<li>Scripts</li></ul><br/><br/><strong>Nickname:</strong> createScriptPackage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScriptPackage",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create script packages in the target project."
          }
        }
      ]
    },
    {
      "path": "/api/scriptrun/{id}",
      "description": "A resource for managing a single script run.  When updating a script run you can have the opportunity to 'complete' the run without supplying values for all the step results i.e. if the first step result is failed, you can skip providing the remainder of the step results - see the PUT examples for more information.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getScriptRun",
          "responseClass": "ScriptRun",
          "summary": "Retrieves a single script run by its unique identifier.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>StepResults</li>\r\n<li>Assignment</li>\r\n<li>Widgets</li>\r\n<li>FieldValues</li></ul><br/><br/><strong>Nickname:</strong> getScriptRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the script run.",
            "404": "Returned if no script run with that identifier exists."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "updateScriptRunFields",
          "responseClass": "void",
          "summary": "Updates a script run.",
          "notes": "<strong>Nickname:</strong> updateScriptRunFields (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "operationModel",
              "dataType": "Operation",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "204": "Returned if it updated the script run successfully.",
            "403": "Returned if you do not have permission to update the script run.",
            "404": "Returned if no script run with that identifier exists."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateScriptRun",
          "responseClass": "ScriptRun",
          "summary": "Updates a script run.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>StepResults</li>\r\n<li>Assignment</li>\r\n<li>Widgets</li>\r\n<li>FieldValues</li></ul><br/><br/><strong>Nickname:</strong> updateScriptRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "UpdateScriptRun",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to update the script run.",
            "404": "Returned if no script run with that identifier exists."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteScriptRun",
          "responseClass": "void",
          "summary": "Delete script run by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteScriptRun (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request completed successfully.",
            "403": "Returned if the required permissions to delete this automated test run have not been met.",
            "404": "Returned if no script run with the specified identifier exists."
          }
        }
      ]
    },
    {
      "path": "/api/scriptruns",
      "description": "Script Runs collection resource.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchScriptRuns",
          "responseClass": "QueryResultsOfScriptRun",
          "summary": "Retrieves all (or a subset) of script runs that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>StepResults</li>\r\n<li>Assignment</li>\r\n<li>Widgets</li>\r\n<li>FieldValues</li></ul><br/><br/><strong>Nickname:</strong> searchScriptRuns (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request)."
          }
        }
      ]
    },
    {
      "path": "/api/scripts",
      "description": "Test Scripts collection resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchScripts",
          "responseClass": "QueryResultsOfScript",
          "summary": "Retrieves all (or a subset) of scripts that are visible to the user.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Assignments</li>\r\n<li>Attachments</li>\r\n<li>Steps</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> searchScripts (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if ET would not complete request (normally due to a validation failure or you don't have the necessary permissions to complete the request)."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createScript",
          "responseClass": "Script",
          "summary": "Creates a new test script.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Widgets</li>\r\n<li>FieldValues</li>\r\n<li>Package</li>\r\n<li>Assignments</li>\r\n<li>Attachments</li>\r\n<li>Steps</li>\r\n<li>Status</li>\r\n<li>Priority</li>\r\n<li>Type</li></ul><br/><br/><strong>Nickname:</strong> createScript (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateScript",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if the request could not be satisified (normally due to insufficient permissions, or a missing required field)."
          }
        }
      ]
    },
    {
      "path": "/api/search",
      "description": "Search resource, used for retrieving the results of a TQL query.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "search",
          "responseClass": "void",
          "summary": "Retrieves all (or a subset) of entities that are visible to the user.  The search resource supports both standard and aggregate TQL query expressions.  For long queries you can use the POST method instead.",
          "notes": "<strong>Nickname:</strong> search (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "indexName",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "format",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchUsingPostMethod",
          "responseClass": "void",
          "summary": "Retrieves all (or a subset) of entities that are visible to the user.  The search resource supports both standard and aggregate TQL query expressions.  The parameters must be passed in using the x-www-form-urlencoded content type.",
          "notes": "<strong>Nickname:</strong> searchUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "form",
              "name": "tql",
              "description": "TQL query to execute, including an optional ORDER BY statement to sort the results (see TQL API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "timeZone",
              "description": "Time Zone in which date and time values and calculates should be evaluated (see TimeZone API feature topic in Knowledgebase for more details).",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/search/index/{indexName}",
      "description": "Search indexes resource, allow retrieval of metadata for each index maintained by Enterprise Tester.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSearchIndex",
          "responseClass": "IndexMetadata",
          "summary": "Retrieves information a single index maintained by Enterprise Tester.",
          "notes": "<strong>Nickname:</strong> getSearchIndex (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "indexName",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/search/indexes",
      "description": "Search indexes resource, allow retrieval of metadata for each index maintained by Enterprise Tester.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSearchIndexes",
          "responseClass": "QueryResultsOfIndexMetadata",
          "summary": "Retrieves all (or a subset) of search indexes which are maintained by Enterprise Tester.",
          "notes": "<strong>Nickname:</strong> getSearchIndexes (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/stepresult/{id}",
      "description": "Step Result resource",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getStepResult",
          "responseClass": "StepResult",
          "summary": "Retrieves a single step result by it's unique Identifier",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Run</li>\r\n<li>Attachments</li>\r\n<li>Incidents</li></ul><br/><br/><strong>Nickname:</strong> getStepResult (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if request completed successfully",
            "403": "Returned if you do not have permission to view the step result",
            "404": "Returned if no step result with that identifier exists"
          }
        }
      ]
    },
    {
      "path": "/api/stepresult/{id}/attachments",
      "description": "Step Result Attachments (collection) resource for fetching attachments associated with a step result, or adding new attachments to the step result.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getStepResultAttachments",
          "responseClass": "QueryResultsOfStepResultAttachment",
          "summary": "Retrieves list of attachments for the script.",
          "notes": "<strong>Nickname:</strong> getStepResultAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to retrieve attachments.",
            "404": "Returned if the attachment was not found."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createStepResultAttachment",
          "responseClass": "list[StepResultAttachment]",
          "summary": "Upload one or more attachments for this step result.",
          "notes": "<strong>Nickname:</strong> createStepResultAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/stepresult/{id}/incidents",
      "description": "Step Result Incidents (collection) resource - used to retrieve a collection of all incidents linked to a step, or to link a new incident to a step.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getStepResultIncidentLinks",
          "responseClass": "QueryResultsOfStepRunResultIncident",
          "summary": "Retrieves list of incidents linked to the step result.",
          "notes": "<strong>Nickname:</strong> getStepResultIncidentLinks (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the list of incidents associated with this step result.",
            "404": "Returned if step result does not exist."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createStepResultIncidentLink",
          "responseClass": "StepRunResultIncident",
          "summary": "Create step run result incident link.",
          "notes": "<strong>Nickname:</strong> createStepResultIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateStepRunResultIncident",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the incident was already linked to this step.",
            "201": "Returned if link to incident was created successfully.",
            "403": "Returned if insufficient permission to link to this incident.",
            "404": "Returned if step result or incident does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/stepresult/{stepResultId}/attachment/{id}",
      "description": "Allows you to manage a single step result attachment.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteStepResultAttachment",
          "responseClass": "void",
          "summary": "Deletes an attachment from the step result.",
          "notes": "<strong>Nickname:</strong> deleteStepResultAttachment (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "stepResultId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you have insufficient permissions to delete the attachment.",
            "404": "Returned if the attachment or step result does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/stepresult/{stepResultId}/incident/{id}",
      "description": "Allows you to manage a single incident linked to a step result.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getStepResultIncidentLink",
          "responseClass": "StepRunResultIncident",
          "summary": "Retrieves an an incident link belonging to a step result.",
          "notes": "<strong>Nickname:</strong> getStepResultIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "stepResultId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view the link.",
            "404": "Returned if step result or incident link does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteStepResultIncidentLink",
          "responseClass": "void",
          "summary": "Deletes an incident link belonging to a step result.",
          "notes": "<strong>Nickname:</strong> deleteStepResultIncidentLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "stepResultId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if link was deleted successfully.",
            "403": "Returned if step result can not be deleted (normally because you don't have necessary permissions).",
            "404": "Returned if step result was not found."
          }
        }
      ]
    },
    {
      "path": "/api/swagger",
      "description": "Allows the retrieval of list of Swagger compliant API's exposed by this Enterprise Tester server.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSwaggerAPIList",
          "responseClass": "SwaggerResourceListing",
          "summary": "Retrieves the list of swagger-documented API's exposed by Enterprise Tester.",
          "notes": "<strong>Nickname:</strong> getSwaggerAPIList (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/swagger/api",
      "description": "Retrieves the Swagger documentation for the Enterprise Tester Core REST API.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSwaggerForCoreAPI",
          "responseClass": "void",
          "summary": "Retrieves the swagger definition for the core API.",
          "notes": "<strong>Nickname:</strong> getSwaggerForCoreAPI (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/synchronizer/{id}/schedules",
      "description": "Represents a collection of schedules associated with a synchronization configuration",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSynchronizerSchedules",
          "responseClass": "QueryResultsOfSynchronizationScheduleInfo",
          "summary": "Retrieves information about a synchronizer's schedules",
          "notes": "<strong>Nickname:</strong> getSynchronizerSchedules (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this resource."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createSynchronizerSchedule",
          "responseClass": "SynchronizationScheduleInfo",
          "summary": "Create a new schedule for the synchronizer",
          "notes": "<strong>Nickname:</strong> createSynchronizerSchedule (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateSynchronizationScheduleInfo",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the new schedule was created successfully.",
            "403": "Returned if the user does not have permission to add a new schedule."
          }
        }
      ]
    },
    {
      "path": "/api/synchronizer/{linkId}/schedule/{id}",
      "description": "Represents a single schedule associated with a synchronization configuration",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getLinkSynchronizationSchedule",
          "responseClass": "SynchronizationScheduleInfo",
          "summary": "Retrieves information about a schedule",
          "notes": "<strong>Nickname:</strong> getLinkSynchronizationSchedule (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to view this resource."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "patchLinkSynchronizationSchedule",
          "responseClass": "SynchronizationScheduleInfo",
          "summary": "Patch an existing schedule (currently you can only patch the Enabled status property)",
          "notes": "<strong>Nickname:</strong> patchLinkSynchronizationSchedule (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateSynchronizationScheduleInfo",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to update this resource."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateLinkSynchronizationSchedule",
          "responseClass": "SynchronizationScheduleInfo",
          "summary": "Update an existing schedule",
          "notes": "<strong>Nickname:</strong> updateLinkSynchronizationSchedule (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateSynchronizationScheduleInfo",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to update this resource."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteLinkSynchronizationSchedule",
          "responseClass": "void",
          "summary": "Delete a schedule",
          "notes": "<strong>Nickname:</strong> deleteLinkSynchronizationSchedule (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to delete this resource."
          }
        }
      ]
    },
    {
      "path": "/api/synchronizer/{linkId}/schedule/{id}/run",
      "description": "Represents a run of a schedule for a synchornizer",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "startScheduleSynchronizing",
          "responseClass": "void",
          "summary": "Trigger (Start) the schedule synchronizing immediately",
          "notes": "<strong>Nickname:</strong> startScheduleSynchronizing (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "202": "Returned if the schedule was triggered.",
            "403": "Returned if the user does not have permission to add a new schedule."
          }
        }
      ]
    },
    {
      "path": "/api/systemevent/{id}",
      "description": "Allows the retrieval of details for a single system event",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSystemEvent",
          "responseClass": "SystemEvent",
          "summary": "Retrieves a single system event by it's unique Identifier",
          "notes": "<strong>Nickname:</strong> getSystemEvent (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you request can not be satisified due to lack of permissions.",
            "404": "Returned if the event does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteSystemEvent",
          "responseClass": "void",
          "summary": "Delete a single system event by it's unique Identifier",
          "notes": "<strong>Nickname:</strong> deleteSystemEvent (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you request can not be satisified due to lack of permissions.",
            "404": "Returned if the event does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/systemevents",
      "description": "System Events (Collection) resource, for fetching all or a subset of system events",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSystemEvents",
          "responseClass": "QueryResultsOfSystemEvent",
          "summary": "Retrieves all (or a subset) of external systems events",
          "notes": "<strong>Nickname:</strong> getSystemEvents (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "fileName",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "addSystemEvent",
          "responseClass": "SystemEvent",
          "summary": "Adds a new system event to the log",
          "notes": "<strong>Nickname:</strong> addSystemEvent (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateSystemEvent",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the request was completed successfully.",
            "403": "Returned if you dont not have permission to delete the synchronization event history.",
            "404": "Returned if the link does not exist."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteSystemEventsForLink",
          "responseClass": "void",
          "summary": "Delete all System Events associated with a link",
          "notes": "<strong>Nickname:</strong> deleteSystemEventsForLink (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "linkId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "documentId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you dont not have permission to delete the synchronization event history.",
            "404": "Returned if the link does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/systeminfo",
      "description": "Allows the retrieval of Enterprise Tester system information (such as the version of Enterprise Tester being used, and the modules that are enabled - information that may be required by client library writers to adjust their system behaviour based on the capabilities of the version of Enterprise Tester being connected to).",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getSystemInformation",
          "responseClass": "SystemInfo",
          "summary": "Retrieves system information.",
          "notes": "<strong>Nickname:</strong> getSystemInformation (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "200": "Returns basic system information (version and module info)."
          }
        }
      ]
    },
    {
      "path": "/api/temporaryattachmentset/{id}",
      "description": "Provides the mechanism for retrieving a list of attachments in a set, or adding new attachments to the set.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getTemporaryAttachmentsForSet",
          "responseClass": "QueryResultsOfTemporaryAttachment",
          "summary": "Retrieves a list of attachments in the temporary attachment set.",
          "notes": "<strong>Nickname:</strong> getTemporaryAttachmentsForSet (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "uploadAttachments",
          "responseClass": "list[TemporaryAttachment]",
          "summary": "Upload one or more attachments.",
          "notes": "<strong>Nickname:</strong> uploadAttachments (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if attachments were uploaded successfully.",
            "403": "Returned if the multipart request did not contain any files.",
            "415": "Returned if the request is not mime multipart."
          }
        }
      ]
    },
    {
      "path": "/api/temporaryattachmentset/{setId}/attachment/{id}",
      "description": "Allows management of a single attachment in a temporary attachment set.",
      "operations": [
        {
          "httpMethod": "DELETE",
          "nickname": "deleteTemporaryAttachmentFromSet",
          "responseClass": "void",
          "summary": "Deletes an attachment from the temporary attachment set identified by its unique identifier.",
          "notes": "<strong>Nickname:</strong> deleteTemporaryAttachmentFromSet (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "setId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request is completed successfully.",
            "404": "Returned if the attachment or set does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/temporaryattachmentsets",
      "description": "Provides the attachment set collection resource, when you want to create a new temrporary attachment set which you can post new files to.",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "createTemporaryAttachmentSet",
          "responseClass": "TemporaryAttachmentSets",
          "summary": "Create a new temporary attachments set.",
          "notes": "<strong>Nickname:</strong> createTemporaryAttachmentSet (Method Name in swagger code-gen clients)",
          "statusCodes": {
            "201": "Returned if the request is completed successfully."
          }
        }
      ]
    },
    {
      "path": "/api/timezone",
      "description": "Allows the retrieval of information about a time zone.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getTimezoneInformation",
          "responseClass": "TimeZoneInfo",
          "summary": "Retrieves information for a time zone.",
          "notes": "<strong>Nickname:</strong> getTimezoneInformation (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "If then request completed successfully.",
            "403": "Returned if the timezone parameter is not supplied."
          }
        }
      ]
    },
    {
      "path": "/api/user/{id}",
      "description": "Allows the retrieval of details for an individual user.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getUser",
          "responseClass": "User",
          "summary": "Retrieves a single user by ID.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> getUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if user does not exists."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "updateUser",
          "responseClass": "User",
          "summary": "Updates an existing user",
          "notes": "<strong>Nickname:</strong> updateUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateUser",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request contained invalid data or would cause a conflict with an existing user record.",
            "404": "Returned if user does not exists."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteUser",
          "responseClass": "void",
          "summary": "Deletes an existing user (requires that the user have no data associated with them)",
          "notes": "<strong>Nickname:</strong> deleteUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request could not be completed (normally if the user still has data associated with them).",
            "404": "Returned if user does not exists."
          }
        }
      ]
    },
    {
      "path": "/api/user/{id}/groups",
      "description": "Collection resource of groups a user belongs to.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getUsersGroups",
          "responseClass": "QueryResultsOfGroup",
          "summary": "Retrieves all (or a subset) of groups a user belongs to.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> getUsersGroups (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "setGroupMembershipsForUser",
          "responseClass": "QueryResultsOfGroup",
          "summary": "Sets the groups the user is a member of.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Users</li></ul><br/><br/><strong>Nickname:</strong> setGroupMembershipsForUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "GroupMemberships",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if user does not exist"
          }
        }
      ]
    },
    {
      "path": "/api/user/{id}/password",
      "description": "Allows the setting of a password for a user.",
      "operations": [
        {
          "httpMethod": "PUT",
          "nickname": "setUserPassword",
          "responseClass": "void",
          "summary": "Sets or updates the password for a user (you do not require any permissions to set the password for the currently authenticated user)",
          "notes": "<strong>Nickname:</strong> setUserPassword (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "SetPassword",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if password did not meet complexity requirements, or you do not have permission to update the password for this user.",
            "404": "Returned if user does not exists."
          }
        }
      ]
    },
    {
      "path": "/api/user/{id}/permissions/global",
      "description": "Global User Permissions resource - allows the retrieval of the collection of global permissions directly associated with a user, or updating the permissions associated with a user.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getGlobalUserPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Retrieves the global permissions for this user",
          "notes": "<strong>Nickname:</strong> getGlobalUserPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the user does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "setGlobalPermissionsForUser",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Sets the global permissions for this user",
          "notes": "<strong>Nickname:</strong> setGlobalPermissionsForUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "assignments",
              "dataType": "list[CreateOrUpdatePermissionAssignment]",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if one or more permissions could not be resolved.",
            "404": "Returned if the user does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/user/{id}/permissions/projects",
      "description": "Returns links to the set of project user permissions resources",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getProjectUserPermissionLinks",
          "responseClass": "UserPermissionProjects",
          "summary": "Retrieves a set of links, one for each project, which can be used to manage the project user permissions for this user.",
          "notes": "<strong>Nickname:</strong> getProjectUserPermissionLinks (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the user does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/user/{userId}/mailmessages",
      "description": "Allows the queuing for delivery of a mail message to a user",
      "operations": [
        {
          "httpMethod": "POST",
          "nickname": "enqueueMailMessage",
          "responseClass": "QueuedMessage",
          "summary": "Enqueues a mail message for delivery to the user.",
          "notes": "<strong>Nickname:</strong> enqueueMailMessage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "Message",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "201": "Returned if the message was enqueued successfully.",
            "403": "Returned if the user does not have permission to send a mail message to the target user."
          }
        }
      ]
    },
    {
      "path": "/api/user/{userId}/notification/{notificationId}",
      "description": "Resource representing a single notification message for a user.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getNotificationMessage",
          "responseClass": "NotificationMessage",
          "summary": "Retrieves information about a single notification message.",
          "notes": "<strong>Nickname:</strong> getNotificationMessage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "notificationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to view notifications for this user.",
            "404": "Returned if notification message was not found."
          }
        },
        {
          "httpMethod": "PATCH",
          "nickname": "patchNotificationMessage",
          "responseClass": "NotificationMessage",
          "summary": "Patch an existing notification message (Allows updating the Viewed property)",
          "notes": "<strong>Nickname:</strong> patchNotificationMessage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "notificationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "UpdateNotification",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if you do not have permission to mark this notification message as being viewed."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "deleteNotificationMessage",
          "responseClass": "void",
          "summary": "Deletes a single notification message",
          "notes": "<strong>Nickname:</strong> deleteNotificationMessage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "notificationId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to delete notifications for this user.",
            "404": "Returned if notification message was not found."
          }
        }
      ]
    },
    {
      "path": "/api/user/{userId}/notifications",
      "description": "Resource representing the collection of notification messages for a user.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getNotificationsMessagesForUser",
          "responseClass": "QueryResultsOfNotificationMessage",
          "summary": "Retrieves notification messages for a user.",
          "notes": "<strong>Nickname:</strong> getNotificationsMessagesForUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to view notifications for this user."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createNotificationMessage",
          "responseClass": "NotificationMessage",
          "summary": "Create a new notification for the user (users can create notifications for themselves without any permissions, otherwise Administrative permissions are required for the organisation)",
          "notes": "<strong>Nickname:</strong> createNotificationMessage (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateNotification",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to create a notification for this user."
          }
        },
        {
          "httpMethod": "DELETE",
          "nickname": "clearNotificationMessagesForUser",
          "responseClass": "void",
          "summary": "Clears all notifications for the user",
          "notes": "<strong>Nickname:</strong> clearNotificationMessagesForUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if the user does not have permission to delete notifications for this user."
          }
        }
      ]
    },
    {
      "path": "/api/user/{userId}/permissions/project/{projectId}",
      "description": "Project User Permissions resource - allows the retrieval of the collection of permissions directly associated with a user for a project, or updating the permissions associated with a project user.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "getUserProjectPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Retrieves the project permissions for this user",
          "notes": "<strong>Nickname:</strong> getUserProjectPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "404": "Returned if the user does not exist."
          }
        },
        {
          "httpMethod": "PUT",
          "nickname": "setUserProjectPermissions",
          "responseClass": "list[PermissionAssignment]",
          "summary": "Sets the project permissions for this user",
          "notes": "<strong>Nickname:</strong> setUserProjectPermissions (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "path",
              "name": "userId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "path",
              "name": "projectId",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "body",
              "name": "assignments",
              "dataType": "list[CreateOrUpdatePermissionAssignment]",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if one or more permissions could not be resolved.",
            "404": "Returned if the user or project does not exist."
          }
        }
      ]
    },
    {
      "path": "/api/usergroupsearch",
      "description": "Allows the searching of all users and groups by partial match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchUserOrGroupByPartialName",
          "responseClass": "QueryResultsOfUserGroup",
          "summary": "Searches for users or groups by partial name match",
          "notes": "<strong>Nickname:</strong> searchUserOrGroupByPartialName (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchUserOrGroupByPartialNameUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for users or groups by partial name match (using POST to allow large existing value queries).",
          "notes": "<strong>Nickname:</strong> searchUserOrGroupByPartialNameUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        }
      ]
    },
    {
      "path": "/api/users",
      "description": "Allows the search and retrieval of users.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchUsers",
          "responseClass": "QueryResultsOfUser",
          "summary": "Retrieves all (or a subset) of users.",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> searchUsers (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$top",
              "description": "Sets the maximum number of results to return",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$skip",
              "description": "Sets the number of results to skip, before return up the $top number of matching items.",
              "dataType": "integer",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$inlinecount",
              "description": "Determines if the count and total number of results should be included as part of the result set",
              "dataType": "string",
              "required": false,
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "allpages",
                  "none"
                ]
              }
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$filter",
              "description": "OData filter identifying a subset of results to return.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$orderby",
              "description": "OData order-by syntax to order results by one or more fields in ascending or descending order.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "createUser",
          "responseClass": "User",
          "summary": "Create a new user",
          "notes": "<strong>Nickname:</strong> createUser (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "body",
              "name": "model",
              "dataType": "CreateOrUpdateUser",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the request was completed successfully.",
            "403": "Returned if request contained invalid data or would cause a conflict with an existing user record.",
            "404": "Returned if user does not exists."
          }
        }
      ]
    },
    {
      "path": "/api/userssearch",
      "description": "Allows the searching of all users by partial match.",
      "operations": [
        {
          "httpMethod": "GET",
          "nickname": "searchUsersByPartialName",
          "responseClass": "QueryResultsOfUser",
          "summary": "Searches for users by partial name match",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> searchUsersByPartialName (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "query",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "valuesqry",
              "dataType": "boolean",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        },
        {
          "httpMethod": "POST",
          "nickname": "searchUsersByPartialNameUsingPostMethod",
          "responseClass": "void",
          "summary": "Searches for users by partial name match (using POST to allow large existing value queries).",
          "notes": "<strong>Expanders:</strong><br/><ul><li>Groups</li>\r\n<li>DisplayName</li></ul><br/><br/><strong>Nickname:</strong> searchUsersByPartialNameUsingPostMethod (Method Name in swagger code-gen clients)",
          "parameters": [
            {
              "paramType": "query",
              "name": "$expand",
              "description": "Allows the specifying of eager-loading of related data which is returned in-line within the results of the request.",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "query",
              "description": "Partial name to match on",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            },
            {
              "paramType": "form",
              "name": "valuesqry",
              "description": "Query to retreive a set of matches based on their values (values are separated by a pipe '|' character)",
              "dataType": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "statusCodes": {
            "200": "Returned if the search request was able to be satisfied."
          }
        }
      ]
    }
  ],
  "models": {
    "Resources": {
      "id": "Resources",
      "type": "object",
      "properties": {
        "Links": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ResourceInfo"
          }
        }
      }
    },
    "ResourceInfo": {
      "id": "ResourceInfo",
      "type": "object",
      "properties": {
        "Title": {
          "required": true,
          "type": "string"
        },
        "Href": {
          "required": true,
          "type": "string"
        },
        "Rel": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "SupportedHttpMethods": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SupportsOData": {
          "required": true,
          "type": "boolean"
        },
        "SupportsTQL": {
          "required": true,
          "type": "boolean"
        },
        "Help": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfUser": {
      "id": "QueryResultsOfUser",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      }
    },
    "User": {
      "id": "User",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "UserName": {
          "required": true,
          "type": "string"
        },
        "Email": {
          "required": true,
          "type": "string"
        },
        "FirstName": {
          "required": true,
          "type": "string"
        },
        "LastName": {
          "required": true,
          "type": "string"
        },
        "Phone": {
          "required": true,
          "type": "string"
        },
        "LastLogIn": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "IsExternal": {
          "required": true,
          "type": "boolean"
        },
        "Groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "DisplayName": {
          "type": "string"
        }
      }
    },
    "Group": {
      "id": "Group",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      }
    },
    "CreateOrUpdateUser": {
      "id": "CreateOrUpdateUser",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserName": {
          "required": true,
          "type": "string"
        },
        "Email": {
          "required": true,
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Enabled": {
          "required": false,
          "type": "boolean"
        },
        "IsExternal": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "SetPassword": {
      "id": "SetPassword",
      "type": "object",
      "properties": {
        "Password": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfUserGroup": {
      "id": "QueryResultsOfUserGroup",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "UserGroup"
          }
        }
      }
    },
    "UserGroup": {
      "id": "UserGroup",
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "DisplayName": {
          "required": true,
          "type": "string"
        }
      }
    },
    "TemporaryAttachmentSets": {
      "id": "TemporaryAttachmentSets",
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfTemporaryAttachment": {
      "id": "QueryResultsOfTemporaryAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "TemporaryAttachment"
          }
        }
      }
    },
    "TemporaryAttachment": {
      "id": "TemporaryAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "TemporaryId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "Project": {
      "id": "Project",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "OrganisationId": {
          "required": true,
          "type": "string"
        },
        "OrganisationName": {
          "required": true,
          "type": "string"
        },
        "ProjectCategoryId": {
          "type": "string"
        },
        "ProjectCategoryName": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "EstimatedEndDate": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "ManagerId": {
          "type": "string"
        },
        "ManagerUserName": {
          "required": true,
          "type": "string"
        },
        "Slug": {
          "required": true,
          "type": "string"
        },
        "AutoNumberRequirements": {
          "required": true,
          "type": "boolean"
        },
        "AutoNumberScripts": {
          "required": true,
          "type": "boolean"
        },
        "Independent": {
          "required": true,
          "type": "boolean"
        },
        "RequirementNumberReadOnly": {
          "required": true,
          "type": "boolean"
        },
        "ScriptNumberReadOnly": {
          "required": true,
          "type": "boolean"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "StartDate": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "TimeTrackingConfiguration": {
          "$ref": "TimeTrackingConfiguration",
          "type": "TimeTrackingConfiguration"
        },
        "ProjectCategory": {
          "$ref": "ProjectCategory",
          "type": "ProjectCategory"
        },
        "Statuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Priorities": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementStatuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementDifficulties": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "TestTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentResolutions": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentStatuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Versions": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Components": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "ExecutionPackages": {
          "type": "array",
          "items": {
            "$ref": "ExecutionPackage"
          }
        },
        "ScriptPackages": {
          "type": "array",
          "items": {
            "$ref": "ScriptPackage"
          }
        },
        "RequirementPackages": {
          "type": "array",
          "items": {
            "$ref": "RequirementPackage"
          }
        },
        "ExternalSystemLinks": {
          "type": "array",
          "items": {
            "$ref": "ExternalSystemLink"
          }
        },
        "Widgets": {
          "$ref": "EntityTypeWidgets",
          "type": "EntityTypeWidgets"
        }
      }
    },
    "TimeTrackingConfiguration": {
      "id": "TimeTrackingConfiguration",
      "required": false,
      "type": "object",
      "properties": {
        "HoursPerDay": {
          "required": false,
          "type": "integer"
        },
        "DaysPerWeek": {
          "required": false,
          "type": "integer"
        }
      }
    },
    "ProjectCategory": {
      "id": "ProjectCategory",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "OrganisationId": {
          "type": "string"
        },
        "OrganisationName": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "ParentName": {
          "required": true,
          "type": "string"
        },
        "HasChildren": {
          "required": true,
          "type": "boolean"
        },
        "HasProjects": {
          "required": true,
          "type": "boolean"
        },
        "HasParent": {
          "required": true,
          "type": "boolean"
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "Project"
          }
        },
        "Parent": {
          "$ref": "ProjectCategory",
          "type": "ProjectCategory"
        },
        "Organisation": {
          "$ref": "Organisation",
          "type": "Organisation"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "ProjectCategory"
          }
        }
      }
    },
    "Organisation": {
      "id": "Organisation",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "ShortDescription": {
          "required": true,
          "type": "string"
        },
        "LongDescription": {
          "required": true,
          "type": "string"
        },
        "IndustryType": {
          "required": true,
          "type": "string"
        },
        "RelationshipTypes": {
          "type": "array",
          "items": {
            "$ref": "RelationshipType"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "Project"
          }
        },
        "ProjectCategories": {
          "type": "array",
          "items": {
            "$ref": "ProjectCategory"
          }
        },
        "Statuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Priorities": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementStatuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "RequirementDifficulties": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "TestTypes": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentResolutions": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "IncidentStatuses": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Versions": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Components": {
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        }
      }
    },
    "RelationshipType": {
      "id": "RelationshipType",
      "required": false,
      "type": "object",
      "properties": {
        "CanCreateRelationshipsOfThisType": {
          "required": true,
          "type": "boolean"
        },
        "CanDeleteRelationshipsOfThisType": {
          "required": true,
          "type": "boolean"
        },
        "CanEditRelationshipsOfThisType": {
          "required": true,
          "type": "boolean"
        },
        "DestinationToSourceLabel": {
          "required": true,
          "type": "string"
        },
        "SourceToDestinationLabel": {
          "required": true,
          "type": "string"
        },
        "OrganisationId": {
          "required": true,
          "type": "string"
        },
        "Key": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "SourceEntityType": {
          "required": true,
          "type": "string"
        },
        "DestinationEntityType": {
          "required": true,
          "type": "string"
        },
        "AllowableDirections": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "INamedEntity"
          }
        }
      }
    },
    "INamedEntity": {
      "id": "INamedEntity",
      "type": "object",
      "properties": {
        "Name": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        }
      }
    },
    "Picklist": {
      "id": "Picklist",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Text": {
          "required": true,
          "type": "string"
        },
        "SortOrder": {
          "required": true,
          "type": "integer"
        },
        "IsEnable": {
          "required": true,
          "type": "boolean"
        }
      }
    },
    "ExecutionPackage": {
      "id": "ExecutionPackage",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Stereotype": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "ExecutionPackage"
          }
        },
        "Parent": {
          "$ref": "ExecutionPackage",
          "type": "ExecutionPackage"
        },
        "Project": {
          "$ref": "Project",
          "type": "Project"
        },
        "AutomatedTestAssignments": {
          "type": "array",
          "items": {
            "$ref": "AutomatedTestAssignment"
          }
        },
        "ScriptAssignments": {
          "type": "array",
          "items": {
            "$ref": "ScriptAssignment"
          }
        },
        "AgileRuns": {
          "type": "array",
          "items": {
            "$ref": "AgileRun"
          }
        }
      }
    },
    "AutomatedTestAssignment": {
      "id": "AutomatedTestAssignment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "AutomatedTestId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "Runs": {
          "type": "array",
          "items": {
            "$ref": "AutomatedTestRun"
          }
        },
        "Package": {
          "$ref": "ExecutionPackage",
          "type": "ExecutionPackage"
        },
        "Totals": {
          "$ref": "ITotals",
          "type": "ITotals"
        },
        "AutomatedTest": {
          "$ref": "AutomatedTest",
          "type": "AutomatedTest"
        }
      }
    },
    "AutomatedTestRun": {
      "id": "AutomatedTestRun",
      "required": false,
      "type": "object",
      "properties": {
        "RunByDisplayName": {
          "type": "string"
        },
        "RunBy": {
          "type": "string"
        },
        "RunById": {
          "type": "string"
        },
        "AssignmentId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "ImportedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "StartedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "FinishedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "Totals": {
          "$ref": "ITotals",
          "type": "ITotals"
        },
        "Assignment": {
          "$ref": "AutomatedTestAssignment",
          "type": "AutomatedTestAssignment"
        }
      }
    },
    "ITotals": {
      "id": "ITotals",
      "required": false,
      "type": "object",
      "properties": {
        "Errors": {
          "required": true,
          "type": "integer"
        },
        "Failed": {
          "required": true,
          "type": "integer"
        },
        "Iterations": {
          "required": true,
          "type": "integer"
        },
        "NotRun": {
          "required": true,
          "type": "integer"
        },
        "Passed": {
          "required": true,
          "type": "integer"
        },
        "Skipped": {
          "required": true,
          "type": "integer"
        },
        "Warnings": {
          "required": true,
          "type": "integer"
        },
        "Done": {
          "required": true,
          "type": "integer"
        },
        "Infos": {
          "required": true,
          "type": "integer"
        },
        "TotalNodes": {
          "required": true,
          "type": "integer"
        },
        "TotalResults": {
          "required": true,
          "type": "integer"
        }
      }
    },
    "AutomatedTest": {
      "id": "AutomatedTest",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "CreatedBy": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedById": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedBy": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "PackageName": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "Assignments": {
          "type": "array",
          "items": {
            "$ref": "AutomatedTestAssignment"
          }
        },
        "Configuration": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "ScriptAssignment": {
      "id": "ScriptAssignment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ScriptId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "Package": {
          "$ref": "ExecutionPackage",
          "type": "ExecutionPackage"
        },
        "Runs": {
          "type": "array",
          "items": {
            "$ref": "ScriptRun"
          }
        },
        "LastRun": {
          "$ref": "ScriptRun",
          "type": "ScriptRun"
        },
        "Script": {
          "$ref": "Script",
          "type": "Script"
        }
      }
    },
    "ScriptRun": {
      "id": "ScriptRun",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ActualDuration": {
          "type": "string"
        },
        "ScriptId": {
          "required": true,
          "type": "string"
        },
        "ScriptVersion": {
          "required": true,
          "type": "integer"
        },
        "AssignmentId": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "type": "string"
        },
        "CreatedBy": {
          "type": "string"
        },
        "RunById": {
          "type": "string"
        },
        "RunBy": {
          "type": "string"
        },
        "LastUpdatedById": {
          "type": "string"
        },
        "LastUpdatedBy": {
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "Completed": {
          "required": false,
          "type": "boolean"
        },
        "StepResults": {
          "type": "array",
          "items": {
            "$ref": "StepResult"
          }
        },
        "Assignment": {
          "$ref": "ScriptAssignment",
          "type": "ScriptAssignment"
        },
        "Widgets": {
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        }
      }
    },
    "StepResult": {
      "id": "StepResult",
      "required": false,
      "type": "object",
      "properties": {
        "RunId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Data": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "required": true,
          "type": "string"
        },
        "ExpectedResult": {
          "required": true,
          "type": "string"
        },
        "ActualResult": {
          "required": true,
          "type": "string"
        },
        "Outcome": {
          "required": true,
          "type": "string"
        },
        "HasIncidents": {
          "required": true,
          "type": "boolean"
        },
        "HasAttachments": {
          "required": true,
          "type": "boolean"
        },
        "Run": {
          "$ref": "ScriptRun",
          "type": "ScriptRun"
        },
        "Attachments": {
          "type": "array",
          "items": {
            "$ref": "StepResultAttachment"
          }
        },
        "Incidents": {
          "type": "array",
          "items": {
            "$ref": "StepRunResultIncident"
          }
        }
      }
    },
    "StepResultAttachment": {
      "id": "StepResultAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "StepResultId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "StepRunResultIncident": {
      "id": "StepRunResultIncident",
      "required": false,
      "type": "object",
      "properties": {
        "StepResultId": {
          "required": true,
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "AbstractWidget": {
      "id": "AbstractWidget",
      "required": false,
      "type": "object",
      "properties": {
        "FieldCategory": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "WidgetType": {
          "type": "string"
        },
        "ImplementationType": {
          "type": "string"
        },
        "HandlerType": {
          "type": "string"
        },
        "ValueType": {
          "type": "string"
        },
        "ItemId": {
          "type": "string"
        },
        "Required": {
          "required": false,
          "type": "boolean"
        },
        "ReadOnly": {
          "required": false,
          "type": "boolean"
        },
        "TabIndex": {
          "required": false,
          "type": "integer"
        },
        "Hidden": {
          "required": false,
          "type": "boolean"
        },
        "FormName": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "Object": {
      "id": "Object",
      "required": false,
      "type": "object",
      "properties": {}
    },
    "Script": {
      "id": "Script",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "PriorityId": {
          "required": true,
          "type": "string"
        },
        "StatusId": {
          "required": true,
          "type": "string"
        },
        "TypeId": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "CreatedBy": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedById": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedBy": {
          "required": true,
          "type": "string"
        },
        "Objective": {
          "required": true,
          "type": "string"
        },
        "PreCondition": {
          "required": true,
          "type": "string"
        },
        "PostCondition": {
          "required": true,
          "type": "string"
        },
        "Number": {
          "required": false,
          "type": "integer"
        },
        "EstimatedDuration": {
          "required": true,
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "PackageName": {
          "required": true,
          "type": "string"
        },
        "ChangeComment": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "required": true,
          "type": "string"
        },
        "VersionNumber": {
          "required": true,
          "type": "integer"
        },
        "HasAttachments": {
          "required": true,
          "type": "boolean"
        },
        "Widgets": {
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "Package": {
          "$ref": "ScriptPackage",
          "type": "ScriptPackage"
        },
        "Assignments": {
          "type": "array",
          "items": {
            "$ref": "ScriptAssignment"
          }
        },
        "Attachments": {
          "type": "array",
          "items": {
            "$ref": "ScriptAttachment"
          }
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "Step"
          }
        },
        "Status": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Priority": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Type": {
          "$ref": "Picklist",
          "type": "Picklist"
        }
      }
    },
    "ScriptPackage": {
      "id": "ScriptPackage",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "ScriptPackage"
          }
        },
        "Parent": {
          "$ref": "ScriptPackage",
          "type": "ScriptPackage"
        },
        "Project": {
          "$ref": "Project",
          "type": "Project"
        },
        "Scripts": {
          "type": "array",
          "items": {
            "$ref": "Script"
          }
        }
      }
    },
    "ScriptAttachment": {
      "id": "ScriptAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ScriptId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "Step": {
      "id": "Step",
      "required": false,
      "type": "object",
      "properties": {
        "Description": {
          "required": true,
          "type": "string"
        },
        "ExpectedResult": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "required": true,
          "type": "string"
        },
        "Data": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        }
      }
    },
    "AgileRun": {
      "id": "AgileRun",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AssignedTo": {
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "required": true,
          "type": "string"
        },
        "Number": {
          "required": false,
          "type": "integer"
        },
        "Objective": {
          "required": true,
          "type": "string"
        },
        "PostCondition": {
          "required": true,
          "type": "string"
        },
        "PreCondition": {
          "required": true,
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "SourceId": {
          "type": "string"
        },
        "SourceContainerId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "PackageName": {
          "required": true,
          "type": "string"
        },
        "EstimatedDuration": {
          "required": true,
          "type": "string"
        },
        "ActualDuration": {
          "required": true,
          "type": "string"
        },
        "ExecutionStatus": {
          "required": true,
          "type": "string"
        },
        "AgileRunNumberReadOnly": {
          "required": true,
          "type": "boolean"
        },
        "Widgets": {
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "AgileRunStep"
          }
        },
        "Project": {
          "$ref": "Project",
          "type": "Project"
        },
        "Status": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Priority": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Type": {
          "$ref": "Picklist",
          "type": "Picklist"
        }
      }
    },
    "AgileRunStep": {
      "id": "AgileRunStep",
      "required": false,
      "type": "object",
      "properties": {
        "Description": {
          "required": true,
          "type": "string"
        },
        "ExpectedResult": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Data": {
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "ActualResult": {
          "type": "string"
        },
        "Result": {
          "required": true,
          "type": "string",
          "enum": [
            "NotRun",
            "Failed",
            "Passed",
            "Blocked",
            "Undetermined"
          ]
        },
        "Id": {
          "type": "string"
        },
        "HasIncidents": {
          "required": false,
          "type": "boolean"
        },
        "HasAttachments": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "RequirementPackage": {
      "id": "RequirementPackage",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "RequirementPackage"
          }
        },
        "Parent": {
          "$ref": "RequirementPackage",
          "type": "RequirementPackage"
        },
        "Project": {
          "$ref": "Project",
          "type": "Project"
        },
        "Requirements": {
          "type": "array",
          "items": {
            "$ref": "Requirement"
          }
        }
      }
    },
    "Requirement": {
      "id": "Requirement",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "PriorityId": {
          "required": true,
          "type": "string"
        },
        "StatusId": {
          "required": true,
          "type": "string"
        },
        "TypeId": {
          "required": true,
          "type": "string"
        },
        "DifficultyLevelId": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "CreatedBy": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedById": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedBy": {
          "required": true,
          "type": "string"
        },
        "Number": {
          "required": false,
          "type": "integer"
        },
        "EstimatedDuration": {
          "required": true,
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "OrderNumber": {
          "required": true,
          "type": "integer"
        },
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "ParentName": {
          "required": true,
          "type": "string"
        },
        "PackageName": {
          "required": true,
          "type": "string"
        },
        "ChangeComment": {
          "required": true,
          "type": "string"
        },
        "VersionNumber": {
          "required": true,
          "type": "integer"
        },
        "HasAttachments": {
          "required": true,
          "type": "boolean"
        },
        "Widgets": {
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "Package": {
          "$ref": "RequirementPackage",
          "type": "RequirementPackage"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "Requirement"
          }
        },
        "Attachments": {
          "type": "array",
          "items": {
            "$ref": "RequirementAttachment"
          }
        },
        "Status": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Priority": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Type": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "DifficultyLevel": {
          "$ref": "Picklist",
          "type": "Picklist"
        }
      }
    },
    "RequirementAttachment": {
      "id": "RequirementAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "RequirementId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "ExternalSystemLink": {
      "id": "ExternalSystemLink",
      "required": false,
      "type": "object",
      "properties": {
        "ExternalSystemId": {
          "required": true,
          "type": "string"
        },
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "TypeForDisplay": {
          "required": true,
          "type": "string"
        },
        "ExternalSystemName": {
          "required": true,
          "type": "string"
        },
        "ExternalSystemImplementationType": {
          "required": true,
          "type": "string"
        },
        "ExternalSystemConnectionType": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "LastSynchronizedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "LastDestinationToSourceSynchronizationAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "LastSourceToDestinationSynchronizationAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "EaPackageId": {
          "type": "string"
        },
        "RequirementPackageId": {
          "type": "string"
        },
        "TestExecutionPackageId": {
          "type": "string"
        },
        "TestScriptPackageId": {
          "type": "string"
        },
        "DefectTrackerProjectId": {
          "type": "string"
        },
        "InternalPackageName": {
          "type": "string"
        },
        "ConfigurationComplete": {
          "required": true,
          "type": "boolean"
        },
        "ConfigurationProblems": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AutoSelect": {
          "required": true,
          "type": "string",
          "enum": [
            "NotApplicable",
            "Yes",
            "No"
          ]
        },
        "Configuration": {
          "type": "string"
        },
        "ExternalSystem": {
          "$ref": "ExternalSystem",
          "type": "ExternalSystem"
        }
      }
    },
    "ExternalSystem": {
      "id": "ExternalSystem",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "OrganisationId": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "ConnectionType": {
          "required": true,
          "type": "string"
        },
        "ConnectionString": {
          "required": true,
          "type": "string"
        },
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "QualifiedName": {
          "required": true,
          "type": "string"
        },
        "TypeDescription": {
          "required": true,
          "type": "string"
        },
        "NumberOfLinks": {
          "required": true,
          "type": "integer"
        },
        "Categories": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserName": {
          "required": true,
          "type": "string"
        },
        "HasPassword": {
          "required": true,
          "type": "boolean"
        },
        "ConfigurationComplete": {
          "required": true,
          "type": "boolean"
        },
        "ConfigurationProblems": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Configuration": {
          "type": "string"
        },
        "ExternalSystemLinks": {
          "type": "array",
          "items": {
            "$ref": "ExternalSystemLink"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "Widgets": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "AdditionalConfigurationLinks": {
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        }
      }
    },
    "Link": {
      "id": "Link",
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "Inline": {
          "required": true,
          "type": "boolean"
        },
        "Href": {
          "required": true,
          "type": "string"
        },
        "Rel": {
          "required": true,
          "type": "string"
        }
      }
    },
    "EntityTypeWidgets": {
      "id": "EntityTypeWidgets",
      "required": false,
      "type": "object",
      "properties": {
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "Incident": {
          "$ref": "EntityWidgets",
          "type": "EntityWidgets"
        },
        "Requirement": {
          "$ref": "EntityWidgets",
          "type": "EntityWidgets"
        },
        "TestScript": {
          "$ref": "EntityWidgets",
          "type": "EntityWidgets"
        },
        "AgileRun": {
          "$ref": "EntityWidgets",
          "type": "EntityWidgets"
        },
        "ScriptRun": {
          "$ref": "EntityWidgets",
          "type": "EntityWidgets"
        }
      }
    },
    "EntityWidgets": {
      "id": "EntityWidgets",
      "required": false,
      "type": "object",
      "properties": {
        "EntityType": {
          "required": true,
          "type": "string"
        },
        "Widgets": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        }
      }
    },
    "CreateOrUpdateProject": {
      "id": "CreateOrUpdateProject",
      "type": "object",
      "properties": {
        "Name": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "TemplateId": {
          "type": "string"
        },
        "OrganisationId": {
          "type": "string"
        },
        "ProjectCategoryId": {
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "EstimatedEndDate": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "ManagerId": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "AutoNumberRequirements": {
          "required": false,
          "type": "boolean"
        },
        "AutoNumberScripts": {
          "required": false,
          "type": "boolean"
        },
        "Independent": {
          "required": false,
          "type": "boolean"
        },
        "RequirementNumberReadOnly": {
          "required": false,
          "type": "boolean"
        },
        "ScriptNumberReadOnly": {
          "required": false,
          "type": "boolean"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "StartDate": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "TimeTrackingConfiguration": {
          "$ref": "TimeTrackingConfiguration",
          "type": "TimeTrackingConfiguration"
        },
        "ProjectTypeId": {
          "type": "string"
        },
        "Linked": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "QueryResultsOfProject": {
      "id": "QueryResultsOfProject",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Project"
          }
        }
      }
    },
    "CreateOrUpdateAgileRun": {
      "id": "CreateOrUpdateAgileRun",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "AgileRunStep"
          }
        },
        "Name": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Number": {
          "required": false,
          "type": "integer"
        },
        "Objective": {
          "type": "string"
        },
        "PostCondition": {
          "type": "string"
        },
        "PreCondition": {
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ProjectId": {
          "type": "string"
        },
        "EstimatedDuration": {
          "type": "string"
        },
        "ActualDuration": {
          "type": "string"
        },
        "WidgetValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "QueryResultsOfAgileRun": {
      "id": "QueryResultsOfAgileRun",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AgileRun"
          }
        }
      }
    },
    "QueryResultsOfAgileRunStepAttachment": {
      "id": "QueryResultsOfAgileRunStepAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AgileRunStepAttachment"
          }
        }
      }
    },
    "AgileRunStepAttachment": {
      "id": "AgileRunStepAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "RunId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "StepId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "AgileRunStepIncident": {
      "id": "AgileRunStepIncident",
      "required": false,
      "type": "object",
      "properties": {
        "StepId": {
          "required": true,
          "type": "string"
        },
        "RunId": {
          "required": true,
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfAgileRunStepIncident": {
      "id": "QueryResultsOfAgileRunStepIncident",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AgileRunStepIncident"
          }
        }
      }
    },
    "CreateAgileRunStepIncident": {
      "id": "CreateAgileRunStepIncident",
      "type": "object",
      "properties": {
        "RunId": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "BackgroundTask": {
      "id": "BackgroundTask",
      "type": "object",
      "properties": {
        "Complete": {
          "type": "boolean"
        },
        "Error": {
          "type": "string"
        },
        "TotalElements": {
          "required": false,
          "type": "integer"
        },
        "ProcessedElements": {
          "required": false,
          "type": "integer"
        },
        "StartedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "FinishedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "ProgressInPercent": {
          "required": false,
          "type": "number"
        },
        "Elapsed": {
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Message": {
          "required": true,
          "type": "string"
        }
      }
    },
    "CreateBackgroundTask": {
      "id": "CreateBackgroundTask",
      "type": "object",
      "properties": {
        "Type": {
          "required": true,
          "type": "string"
        },
        "Parameters": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "StreamProgress": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "QueryResultsOfProjectTemplate": {
      "id": "QueryResultsOfProjectTemplate",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ProjectTemplate"
          }
        }
      }
    },
    "ProjectTemplate": {
      "id": "ProjectTemplate",
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Title": {
          "required": true,
          "type": "string"
        }
      }
    },
    "CreateOrUpdateExecutionPackage": {
      "id": "CreateOrUpdateExecutionPackage",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Stereotype": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfExecutionPackage": {
      "id": "QueryResultsOfExecutionPackage",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExecutionPackage"
          }
        }
      }
    },
    "CreateOrUpdateScriptPackage": {
      "id": "CreateOrUpdateScriptPackage",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfScriptPackage": {
      "id": "QueryResultsOfScriptPackage",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ScriptPackage"
          }
        }
      }
    },
    "CreateOrUpdateRequirementPackage": {
      "id": "CreateOrUpdateRequirementPackage",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ParentId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfRequirementPackage": {
      "id": "QueryResultsOfRequirementPackage",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "RequirementPackage"
          }
        }
      }
    },
    "QueryResultsOfScriptAssignment": {
      "id": "QueryResultsOfScriptAssignment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ScriptAssignment"
          }
        }
      }
    },
    "CreateOrUpdateScriptAssignment": {
      "id": "CreateOrUpdateScriptAssignment",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "ScriptId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfScript": {
      "id": "QueryResultsOfScript",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Script"
          }
        }
      }
    },
    "CreateOrUpdateScript": {
      "id": "CreateOrUpdateScript",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TemporaryId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "Number": {
          "type": "any"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "EstimatedDuration": {
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Objective": {
          "type": "string"
        },
        "PostCondition": {
          "type": "string"
        },
        "PreCondition": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "Step"
          }
        },
        "ChangeComment": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "WidgetValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "type": "object",
      "properties": {
        "update": {
          "$ref": "Update",
          "type": "Update"
        }
      }
    },
    "Update": {
      "id": "Update",
      "required": true,
      "type": "object",
      "properties": {
        "customFields": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "CusField"
          }
        },
        "pickListValues": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "PickListValue"
          }
        }
      }
    },
    "CusField": {
      "id": "CusField",
      "type": "object",
      "properties": {
        "set": {
          "$ref": "Set",
          "type": "Set"
        }
      }
    },
    "Set": {
      "id": "Set",
      "required": false,
      "type": "object",
      "properties": {
        "name": {
          "required": true,
          "type": "string"
        },
        "valueType": {
          "required": true,
          "type": "string"
        },
        "value": {
          "required": true,
          "type": "string"
        },
        "ownerId": {
          "required": true,
          "type": "string"
        },
        "id": {
          "required": true,
          "type": "string"
        },
        "text": {
          "required": true,
          "type": "string"
        },
        "sortOrder": {
          "required": true,
          "type": "integer"
        }
      }
    },
    "PickListValue": {
      "id": "PickListValue",
      "type": "object",
      "properties": {
        "add": {
          "$ref": "Add",
          "type": "Add"
        },
        "set": {
          "$ref": "Set",
          "type": "Set"
        },
        "remove": {
          "$ref": "Remove",
          "type": "Remove"
        }
      }
    },
    "Add": {
      "id": "Add",
      "required": true,
      "type": "object",
      "properties": {
        "ownerId": {
          "required": true,
          "type": "string"
        },
        "text": {
          "required": true,
          "type": "string"
        },
        "sortOrder": {
          "required": true,
          "type": "integer"
        }
      }
    },
    "Remove": {
      "id": "Remove",
      "required": true,
      "type": "object",
      "properties": {
        "ownerId": {
          "required": true,
          "type": "string"
        },
        "id": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfScriptAttachment": {
      "id": "QueryResultsOfScriptAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ScriptAttachment"
          }
        }
      }
    },
    "QueryResultsOfCustomFieldType": {
      "id": "QueryResultsOfCustomFieldType",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "CustomFieldType"
          }
        }
      }
    },
    "CustomFieldType": {
      "id": "CustomFieldType",
      "required": false,
      "type": "object",
      "properties": {
        "Name": {
          "required": true,
          "type": "string"
        },
        "DisplayName": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfCustomField": {
      "id": "QueryResultsOfCustomField",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "CustomField"
          }
        }
      }
    },
    "CustomField": {
      "id": "CustomField",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "CustomFieldTypeName": {
          "required": true,
          "type": "string"
        },
        "Label": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Required": {
          "required": true,
          "type": "boolean"
        },
        "Entities": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Scopes": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Scope"
          }
        }
      }
    },
    "Scope": {
      "id": "Scope",
      "required": false,
      "type": "object",
      "properties": {
        "Type": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        }
      }
    },
    "CreateCustomField": {
      "id": "CreateCustomField",
      "type": "object",
      "properties": {
        "Entities": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Scopes": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Scope"
          }
        },
        "Required": {
          "required": true,
          "type": "boolean"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Label": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "DefaultValue": {
          "required": true,
          "type": "string"
        },
        "HandlerType": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfScriptRun": {
      "id": "QueryResultsOfScriptRun",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ScriptRun"
          }
        }
      }
    },
    "CreateNewRun": {
      "id": "CreateNewRun",
      "type": "object",
      "properties": {
        "TesterId": {
          "type": "string"
        },
        "WidgetValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "UpdateScriptRun": {
      "id": "UpdateScriptRun",
      "type": "object",
      "properties": {
        "AttemptToComplete": {
          "required": false,
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "ActualDuration": {
          "type": "string"
        },
        "StepResults": {
          "type": "array",
          "items": {
            "$ref": "UpdateStepResult"
          }
        },
        "WidgetValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "UpdateStepResult": {
      "id": "UpdateStepResult",
      "type": "object",
      "properties": {
        "ActualResult": {
          "required": true,
          "type": "string"
        },
        "Outcome": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfAutomatedTest": {
      "id": "QueryResultsOfAutomatedTest",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AutomatedTest"
          }
        }
      }
    },
    "CreateOrUpdateAutomatedTest": {
      "id": "CreateOrUpdateAutomatedTest",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "Configuration": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "QueryResultsOfAutomatedTestAssignment": {
      "id": "QueryResultsOfAutomatedTestAssignment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AutomatedTestAssignment"
          }
        }
      }
    },
    "CreateOrUpdateAutomatedTestAssignment": {
      "id": "CreateOrUpdateAutomatedTestAssignment",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AutomatedTestId": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        }
      }
    },
    "QueryResultsOfAutomatedTestRun": {
      "id": "QueryResultsOfAutomatedTestRun",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AutomatedTestRun"
          }
        }
      }
    },
    "AutomatedTestRunDataTables": {
      "id": "AutomatedTestRunDataTables",
      "type": "object",
      "properties": {
        "Tables": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Table"
          }
        }
      }
    },
    "Table": {
      "id": "Table",
      "type": "object",
      "properties": {
        "Name": {
          "required": true,
          "type": "string"
        },
        "ColumnNames": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Rows": {
          "required": true,
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "QueryResultsOfRequirement": {
      "id": "QueryResultsOfRequirement",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Requirement"
          }
        }
      }
    },
    "CreateOrUpdateRequirement": {
      "id": "CreateOrUpdateRequirement",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TemporaryId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "Number": {
          "type": "any"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "EstimatedDuration": {
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "DifficultyLevelId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ChangeComment": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ParentId": {
          "type": "string"
        },
        "WidgetValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "QueryResultsOfRequirementAttachment": {
      "id": "QueryResultsOfRequirementAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "RequirementAttachment"
          }
        }
      }
    },
    "QueryResultsOfExternalSystemComment": {
      "id": "QueryResultsOfExternalSystemComment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExternalSystemComment"
          }
        }
      }
    },
    "ExternalSystemComment": {
      "id": "ExternalSystemComment",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "Body": {
          "required": true,
          "type": "string"
        },
        "CreatedBy": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "ExternalSystemLinkId": {
          "required": true,
          "type": "string"
        },
        "TicketId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfIncident": {
      "id": "QueryResultsOfIncident",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Incident"
          }
        }
      }
    },
    "Incident": {
      "id": "Incident",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Summary": {
          "required": true,
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "ResolutionId": {
          "type": "string"
        },
        "AffectedVersionIds": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FixedVersionIds": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ComponentIds": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExternalSystemLinkIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "CreatedBy": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedById": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedBy": {
          "required": true,
          "type": "string"
        },
        "ProjectId": {
          "required": true,
          "type": "string"
        },
        "ProjectName": {
          "required": true,
          "type": "string"
        },
        "IncidentNumber": {
          "required": true,
          "type": "integer"
        },
        "InternalId": {
          "required": true,
          "type": "string"
        },
        "VersionNumber": {
          "required": true,
          "type": "integer"
        },
        "HasAttachments": {
          "required": true,
          "type": "boolean"
        },
        "Widgets": {
          "type": "array",
          "items": {
            "$ref": "AbstractWidget"
          }
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        },
        "Project": {
          "$ref": "Project",
          "type": "Project"
        },
        "LastComment": {
          "$ref": "IncidentComment",
          "type": "IncidentComment"
        },
        "Status": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Priority": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Type": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Resolution": {
          "$ref": "Picklist",
          "type": "Picklist"
        },
        "Components": {
          "$ref": "PicklistCollection",
          "type": "PicklistCollection"
        },
        "FixedVersions": {
          "$ref": "PicklistCollection",
          "type": "PicklistCollection"
        },
        "AffectedVersions": {
          "$ref": "PicklistCollection",
          "type": "PicklistCollection"
        },
        "ExternalSystemLinks": {
          "type": "array",
          "items": {
            "$ref": "ExternalSystemLink"
          }
        },
        "ExternalKeys": {
          "type": "string"
        },
        "Comments": {
          "type": "array",
          "items": {
            "$ref": "IncidentComment"
          }
        },
        "Attachments": {
          "type": "array",
          "items": {
            "$ref": "IncidentAttachment"
          }
        }
      }
    },
    "IncidentComment": {
      "id": "IncidentComment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Body": {
          "required": true,
          "type": "string"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "CreatedByUserName": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedById": {
          "required": true,
          "type": "string"
        },
        "LastUpdatedByUserName": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        }
      }
    },
    "PicklistCollection": {
      "id": "PicklistCollection",
      "required": false,
      "type": "object",
      "properties": {
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        },
        "Text": {
          "required": true,
          "type": "string"
        }
      }
    },
    "IncidentAttachment": {
      "id": "IncidentAttachment",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "CreateOrUpdateIncident": {
      "id": "CreateOrUpdateIncident",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TemporaryId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Number": {
          "required": false,
          "type": "integer"
        },
        "Summary": {
          "type": "string"
        },
        "AssignedToId": {
          "type": "string"
        },
        "PriorityId": {
          "type": "string"
        },
        "StatusId": {
          "type": "string"
        },
        "TypeId": {
          "type": "string"
        },
        "ResolutionId": {
          "type": "string"
        },
        "AffectedVersionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FixedVersionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ComponentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Description": {
          "type": "string"
        },
        "ExternalSystemLinkIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExternalSystemLinks": {
          "type": "array",
          "items": {
            "$ref": "IdOrName"
          }
        },
        "Comments": {
          "type": "array",
          "items": {
            "$ref": "CreateOrUpdateIncidentComment"
          }
        },
        "WidgetValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "FieldValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "IdOrName": {
      "id": "IdOrName",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "CreateOrUpdateIncidentComment": {
      "id": "CreateOrUpdateIncidentComment",
      "type": "object",
      "properties": {
        "CreatedById": {
          "type": "string"
        },
        "LastUpdatedById": {
          "type": "string"
        },
        "Body": {
          "required": true,
          "type": "string"
        },
        "TicketCommentId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "CreatedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "LastUpdatedAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        }
      }
    },
    "QueryResultsOfIncidentComment": {
      "id": "QueryResultsOfIncidentComment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "IncidentComment"
          }
        }
      }
    },
    "QueryResultsOfIncidentAttachment": {
      "id": "QueryResultsOfIncidentAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "IncidentAttachment"
          }
        }
      }
    },
    "QueryResultsOfStepResultAttachment": {
      "id": "QueryResultsOfStepResultAttachment",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "StepResultAttachment"
          }
        }
      }
    },
    "QueryResultsOfStepRunResultIncident": {
      "id": "QueryResultsOfStepRunResultIncident",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "StepRunResultIncident"
          }
        }
      }
    },
    "CreateStepRunResultIncident": {
      "id": "CreateStepRunResultIncident",
      "type": "object",
      "properties": {
        "StepResultId": {
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfOrganisation": {
      "id": "QueryResultsOfOrganisation",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Organisation"
          }
        }
      }
    },
    "CreateOrUpdateOrganisation": {
      "id": "CreateOrUpdateOrganisation",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ShortDescription": {
          "type": "string"
        },
        "LongDescription": {
          "type": "string"
        },
        "IndustryType": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfProjectCategory": {
      "id": "QueryResultsOfProjectCategory",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ProjectCategory"
          }
        }
      }
    },
    "CreateOrUpdateProjectCategory": {
      "id": "CreateOrUpdateProjectCategory",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OrderNumber": {
          "required": false,
          "type": "integer"
        },
        "ParentId": {
          "type": "string"
        },
        "OrganisationId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfExternalSystem": {
      "id": "QueryResultsOfExternalSystem",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExternalSystem"
          }
        }
      }
    },
    "CreateOrUpdateExternalSystem": {
      "id": "CreateOrUpdateExternalSystem",
      "type": "object",
      "properties": {
        "Type": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Enabled": {
          "required": false,
          "type": "boolean"
        },
        "OrganisationId": {
          "type": "string"
        },
        "FieldValues": {
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "QueryResultsOfExternalSystemLink": {
      "id": "QueryResultsOfExternalSystemLink",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExternalSystemLink"
          }
        }
      }
    },
    "CreateExternalSystemLink": {
      "id": "CreateExternalSystemLink",
      "type": "object",
      "properties": {
        "Source": {
          "$ref": "CreateExternalSystemLinkEnd",
          "type": "CreateExternalSystemLinkEnd"
        },
        "Destination": {
          "$ref": "CreateExternalSystemLinkEnd",
          "type": "CreateExternalSystemLinkEnd"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Enabled": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "CreateExternalSystemLinkEnd": {
      "id": "CreateExternalSystemLinkEnd",
      "required": false,
      "type": "object",
      "properties": {
        "Key": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "FieldValues": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        }
      }
    },
    "EditExternalSystemLink": {
      "id": "EditExternalSystemLink",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Enabled": {
          "required": false,
          "type": "boolean"
        }
      }
    },
    "CopyExternalSystemLink": {
      "id": "CopyExternalSystemLink",
      "type": "object",
      "properties": {
        "Source": {
          "$ref": "CreateExternalSystemLinkEnd",
          "type": "CreateExternalSystemLinkEnd"
        },
        "Destination": {
          "$ref": "CreateExternalSystemLinkEnd",
          "type": "CreateExternalSystemLinkEnd"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "CopyFromLinkId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfTicketSearchResult": {
      "id": "QueryResultsOfTicketSearchResult",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "TicketSearchResult"
          }
        }
      }
    },
    "TicketSearchResult": {
      "id": "TicketSearchResult",
      "required": false,
      "type": "object",
      "properties": {
        "Key": {
          "required": true,
          "type": "string"
        },
        "Summary": {
          "required": true,
          "type": "string"
        },
        "Url": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "ExternalSystemId": {
          "type": "string"
        },
        "ExternalSystemName": {
          "required": true,
          "type": "string"
        },
        "IncidentId": {
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "InternalKey": {
          "required": true,
          "type": "string"
        },
        "ExternalSystem": {
          "$ref": "ExternalSystemLink",
          "type": "ExternalSystemLink"
        }
      }
    },
    "QueryResultsOfGroup": {
      "id": "QueryResultsOfGroup",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        }
      }
    },
    "CreateOrUpdateGroup": {
      "id": "CreateOrUpdateGroup",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        }
      }
    },
    "GroupMemberships": {
      "id": "GroupMemberships",
      "type": "object",
      "properties": {
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "GroupMembership"
          }
        }
      }
    },
    "GroupMembership": {
      "id": "GroupMembership",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserName": {
          "type": "string"
        }
      }
    },
    "Relationship": {
      "id": "Relationship",
      "required": false,
      "type": "object",
      "properties": {
        "EntityId": {
          "required": true,
          "type": "string"
        },
        "Number": {
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "EntityType": {
          "required": true,
          "type": "string"
        },
        "AssignedTo": {
          "required": true,
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "Priority": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "PackageId": {
          "required": true,
          "type": "string"
        },
        "PackageName": {
          "required": true,
          "type": "string"
        },
        "PackageEntityType": {
          "required": true,
          "type": "string"
        },
        "PackagePath": {
          "required": true,
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "ParentPath": {
          "type": "string"
        },
        "ParentName": {
          "type": "string"
        },
        "RelationshipId": {
          "required": true,
          "type": "string"
        },
        "RelationshipTypeKey": {
          "required": true,
          "type": "string"
        },
        "RelationshipType": {
          "required": true,
          "type": "string"
        },
        "Relation": {
          "required": true,
          "type": "string"
        },
        "RelationshipDirection": {
          "required": true,
          "type": "string"
        },
        "CanDelete": {
          "required": true,
          "type": "boolean"
        },
        "CanEdit": {
          "required": true,
          "type": "boolean"
        },
        "Children": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Relationship"
          }
        }
      }
    },
    "CreateRelationship": {
      "id": "CreateRelationship",
      "type": "object",
      "properties": {
        "RelationshipDirection": {
          "required": true,
          "type": "string",
          "enum": [
            "None",
            "SourceToDestination",
            "DestinationToSource",
            "Both"
          ]
        },
        "DestinationEntityId": {
          "required": true,
          "type": "string"
        },
        "DestinationEntityType": {
          "required": true,
          "type": "string"
        },
        "SourceEntityId": {
          "required": true,
          "type": "string"
        },
        "SourceEntityType": {
          "required": true,
          "type": "string"
        }
      }
    },
    "UpdateRelationship": {
      "id": "UpdateRelationship",
      "type": "object",
      "properties": {
        "RelationshipDirection": {
          "required": true,
          "type": "string",
          "enum": [
            "None",
            "SourceToDestination",
            "DestinationToSource",
            "Both"
          ]
        }
      }
    },
    "QueryResultsOfRelationshipType": {
      "id": "QueryResultsOfRelationshipType",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "RelationshipType"
          }
        }
      }
    },
    "SystemInfo": {
      "id": "SystemInfo",
      "type": "object",
      "properties": {
        "PackagePathSeparator": {
          "required": true,
          "type": "string"
        },
        "RootUrl": {
          "required": true,
          "type": "string"
        },
        "StaticContentRootUrl": {
          "required": true,
          "type": "string"
        },
        "TimeZoneId": {
          "required": true,
          "type": "string"
        },
        "UtcOffset": {
          "required": true,
          "type": "string"
        },
        "Version": {
          "required": true,
          "type": "string"
        },
        "Modules": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "ModuleInfo"
            }
          }
        }
      }
    },
    "ModuleInfo": {
      "id": "ModuleInfo",
      "type": "object",
      "properties": {
        "TypeName": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "LoadStatus": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "State": {
          "required": true,
          "type": "string"
        },
        "SupportsStateChange": {
          "required": true,
          "type": "boolean"
        },
        "VendorName": {
          "required": true,
          "type": "string"
        },
        "VendorUrl": {
          "required": true,
          "type": "string"
        },
        "Version": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfPermission": {
      "id": "QueryResultsOfPermission",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Permission"
          }
        }
      }
    },
    "Permission": {
      "id": "Permission",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Comment": {
          "type": "string"
        },
        "Key": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "Permission"
          }
        }
      }
    },
    "UserPermissionProjects": {
      "id": "UserPermissionProjects",
      "type": "object",
      "properties": {
        "Projects": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "UserPermissionProject"
          }
        }
      }
    },
    "UserPermissionProject": {
      "id": "UserPermissionProject",
      "type": "object",
      "properties": {
        "ProjectId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "GroupPermissionProjects": {
      "id": "GroupPermissionProjects",
      "type": "object",
      "properties": {
        "Projects": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "GroupPermissionProject"
          }
        }
      }
    },
    "GroupPermissionProject": {
      "id": "GroupPermissionProject",
      "type": "object",
      "properties": {
        "ProjectId": {
          "required": true,
          "type": "string"
        }
      }
    },
    "PermissionAssignment": {
      "id": "PermissionAssignment",
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Key": {
          "required": true,
          "type": "string"
        }
      }
    },
    "CreateOrUpdatePermissionAssignment": {
      "id": "CreateOrUpdatePermissionAssignment",
      "type": "object",
      "properties": {
        "Key": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfSystemEvent": {
      "id": "QueryResultsOfSystemEvent",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "SystemEvent"
          }
        }
      }
    },
    "SystemEvent": {
      "id": "SystemEvent",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "OccurredAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "LinkId": {
          "type": "string"
        },
        "SystemId": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "Message": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "Source": {
          "required": true,
          "type": "string"
        },
        "EntityType": {
          "type": "string"
        },
        "EntityId": {
          "type": "string"
        },
        "Level": {
          "required": true,
          "type": "string"
        }
      }
    },
    "CreateOrUpdateSystemEvent": {
      "id": "CreateOrUpdateSystemEvent",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EntityId": {
          "type": "string"
        },
        "SystemId": {
          "type": "string"
        },
        "LinkId": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "EntityType": {
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "Message": {
          "required": true,
          "type": "string"
        },
        "Source": {
          "required": true,
          "type": "string"
        },
        "Level": {
          "required": true,
          "type": "string",
          "enum": [
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "OccurredAt": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        }
      }
    },
    "QueryResultsOfIValue": {
      "id": "QueryResultsOfIValue",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "IValue"
          }
        }
      }
    },
    "IValue": {
      "id": "IValue",
      "required": false,
      "type": "object",
      "properties": {
        "Identifier": {
          "required": true,
          "type": "string"
        },
        "Text": {
          "required": true,
          "type": "string"
        },
        "IsEnable": {
          "required": false,
          "type": "boolean"
        },
        "Icon": {
          "type": "string"
        },
        "Parent": {
          "$ref": "IValue",
          "type": "IValue"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "IValue"
          }
        }
      }
    },
    "NotificationMessage": {
      "id": "NotificationMessage",
      "required": false,
      "type": "object",
      "properties": {
        "OccurredAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "HtmlSummary": {
          "required": true,
          "type": "string"
        },
        "Viewed": {
          "required": true,
          "type": "boolean"
        },
        "IconClass": {
          "required": true,
          "type": "string"
        },
        "IconTitle": {
          "required": true,
          "type": "string"
        }
      }
    },
    "UpdateNotification": {
      "id": "UpdateNotification",
      "type": "object",
      "properties": {
        "Viewed": {
          "required": true,
          "type": "boolean"
        }
      }
    },
    "QueryResultsOfNotificationMessage": {
      "id": "QueryResultsOfNotificationMessage",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "NotificationMessage"
          }
        }
      }
    },
    "CreateNotification": {
      "id": "CreateNotification",
      "type": "object",
      "properties": {
        "UserId": {
          "type": "string"
        },
        "HtmlSummary": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfAssignedTo": {
      "id": "QueryResultsOfAssignedTo",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AssignedTo"
          }
        }
      }
    },
    "AssignedTo": {
      "id": "AssignedTo",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "GlobalId": {
          "required": true,
          "type": "string"
        },
        "CssClass": {
          "required": true,
          "type": "string"
        }
      }
    },
    "MailSenderSettings": {
      "id": "MailSenderSettings",
      "type": "object",
      "properties": {
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "FromAddress": {
          "required": true,
          "type": "string"
        },
        "EmailPrefix": {
          "required": true,
          "type": "string"
        },
        "HostName": {
          "required": true,
          "type": "string"
        },
        "Port": {
          "required": false,
          "type": "integer"
        },
        "Timeout": {
          "required": true,
          "type": "integer"
        },
        "SSL": {
          "required": true,
          "type": "boolean"
        },
        "UserName": {
          "required": true,
          "type": "string"
        },
        "Password": {
          "required": true,
          "type": "string"
        },
        "IsValid": {
          "required": false,
          "type": "boolean"
        },
        "ErrorMessage": {
          "type": "string"
        }
      }
    },
    "CreateMailSenderSettings": {
      "id": "CreateMailSenderSettings",
      "type": "object",
      "properties": {
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "Type": {
          "required": true,
          "type": "string"
        },
        "FromAddress": {
          "required": true,
          "type": "string"
        },
        "EmailPrefix": {
          "required": true,
          "type": "string"
        },
        "HostName": {
          "required": true,
          "type": "string"
        },
        "Port": {
          "required": false,
          "type": "integer"
        },
        "Timeout": {
          "required": true,
          "type": "integer"
        },
        "SSL": {
          "required": true,
          "type": "boolean"
        },
        "UserName": {
          "required": true,
          "type": "string"
        },
        "Password": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfQueuedMessage": {
      "id": "QueryResultsOfQueuedMessage",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "QueuedMessage"
          }
        }
      }
    },
    "QueuedMessage": {
      "id": "QueuedMessage",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "EnqueuedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "Subject": {
          "required": true,
          "type": "string"
        },
        "Body": {
          "required": true,
          "type": "string"
        },
        "To": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "MailAddress"
          }
        }
      }
    },
    "MailAddress": {
      "id": "MailAddress",
      "required": false,
      "type": "object",
      "properties": {
        "Address": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        }
      }
    },
    "Message": {
      "id": "Message",
      "type": "object",
      "properties": {
        "Subject": {
          "required": true,
          "type": "string"
        },
        "Body": {
          "required": true,
          "type": "string"
        },
        "To": {
          "type": "array",
          "items": {
            "$ref": "MailAddress"
          }
        }
      }
    },
    "QueryResultsOfPicklist": {
      "id": "QueryResultsOfPicklist",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "Picklist"
          }
        }
      }
    },
    "GridWidgetContext": {
      "id": "GridWidgetContext",
      "type": "object",
      "properties": {
        "IndexName": {
          "required": true,
          "type": "string"
        },
        "AllowableTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "BaseQuery": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageType": {
          "type": "string"
        },
        "Query": {
          "type": "string"
        },
        "Selections": {
          "type": "array",
          "items": {
            "$ref": "TypedId"
          }
        },
        "TimeZone": {
          "type": "string"
        },
        "Parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        }
      }
    },
    "TypedId": {
      "id": "TypedId",
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Type": {
          "required": true,
          "type": "string"
        }
      }
    },
    "GridWidgetData": {
      "id": "GridWidgetData",
      "type": "object",
      "properties": {
        "Data": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "Object",
            "type": "Object"
          }
        }
      }
    },
    "GridWidgetStateSet": {
      "id": "GridWidgetStateSet",
      "type": "object",
      "properties": {
        "HostId": {
          "required": true,
          "type": "string"
        },
        "Positions": {
          "required": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "GridWidgetState",
            "type": "GridWidgetState"
          }
        }
      }
    },
    "GridWidgetState": {
      "id": "GridWidgetState",
      "required": false,
      "type": "object",
      "properties": {
        "Position": {
          "required": true,
          "type": "string"
        },
        "WidgetType": {
          "required": true,
          "type": "string"
        },
        "Data": {
          "required": true,
          "type": "any"
        }
      }
    },
    "EditGridWidgetState": {
      "id": "EditGridWidgetState",
      "type": "object",
      "properties": {
        "WidgetType": {
          "required": true,
          "type": "string"
        },
        "Data": {
          "required": true,
          "type": "any"
        }
      }
    },
    "ResultNode": {
      "id": "ResultNode",
      "required": false,
      "type": "object",
      "properties": {
        "HasAttachments": {
          "required": true,
          "type": "boolean"
        },
        "HasIncidents": {
          "required": true,
          "type": "boolean"
        },
        "HasChildren": {
          "required": true,
          "type": "boolean"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Notes": {
          "required": true,
          "type": "string"
        },
        "Status": {
          "required": true,
          "type": "string"
        },
        "Iteration": {
          "required": false,
          "type": "integer"
        },
        "StartedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "FinishedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "DurationInSeconds": {
          "required": true,
          "type": "number"
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "ResultNode"
          }
        }
      }
    },
    "EditResultNode": {
      "id": "EditResultNode",
      "type": "object",
      "properties": {
        "Notes": {
          "type": "string"
        }
      }
    },
    "AutomatedTestRunAttachment": {
      "id": "AutomatedTestRunAttachment",
      "type": "object",
      "properties": {
        "RunId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "AutomatedTestRunNodeAttachment": {
      "id": "AutomatedTestRunNodeAttachment",
      "type": "object",
      "properties": {
        "NodeId": {
          "required": true,
          "type": "string"
        },
        "RunId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "FileName": {
          "required": true,
          "type": "string"
        },
        "ContentType": {
          "required": true,
          "type": "string"
        },
        "CreatedAt": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        },
        "CreatedById": {
          "required": true,
          "type": "string"
        },
        "Size": {
          "required": true,
          "type": "integer"
        },
        "SourceId": {
          "type": "string"
        }
      }
    },
    "TimeZoneInfo": {
      "id": "TimeZoneInfo",
      "type": "object",
      "properties": {
        "UnresolvedTimeZoneId": {
          "required": true,
          "type": "string"
        },
        "Resolved": {
          "required": true,
          "type": "boolean"
        },
        "TimeZoneId": {
          "required": true,
          "type": "string"
        },
        "UtcOffset": {
          "required": true,
          "type": "string"
        },
        "CurrentTimeInZone": {
          "required": true,
          "type": "string",
          "format": "DateTime"
        }
      }
    },
    "AutomatedTestRunIncident": {
      "id": "AutomatedTestRunIncident",
      "required": false,
      "type": "object",
      "properties": {
        "RunId": {
          "required": true,
          "type": "string"
        },
        "NodeId": {
          "required": true,
          "type": "string"
        },
        "IncidentId": {
          "required": true,
          "type": "string"
        },
        "Run": {
          "$ref": "AutomatedTestRun",
          "type": "AutomatedTestRun"
        },
        "Node": {
          "$ref": "ResultNode",
          "type": "ResultNode"
        },
        "Incident": {
          "$ref": "Incident",
          "type": "Incident"
        }
      }
    },
    "QueryResultsOfAutomatedTestRunIncident": {
      "id": "QueryResultsOfAutomatedTestRunIncident",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "AutomatedTestRunIncident"
          }
        }
      }
    },
    "CreateAutomatedTestRunResultNodeIncident": {
      "id": "CreateAutomatedTestRunResultNodeIncident",
      "type": "object",
      "properties": {
        "IncidentId": {
          "type": "string"
        }
      }
    },
    "QueryResultsOfIndexMetadata": {
      "id": "QueryResultsOfIndexMetadata",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "IndexMetadata"
          }
        }
      }
    },
    "IndexMetadata": {
      "id": "IndexMetadata",
      "required": false,
      "type": "object",
      "properties": {
        "IndexName": {
          "required": true,
          "type": "string"
        },
        "IsPresentable": {
          "required": true,
          "type": "boolean"
        },
        "SupportedTypes": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueryResultsOfExternalSystemType": {
      "id": "QueryResultsOfExternalSystemType",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExternalSystemType"
          }
        }
      }
    },
    "ExternalSystemType": {
      "id": "ExternalSystemType",
      "required": false,
      "type": "object",
      "properties": {
        "Id": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Categories": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueryResultsOfExternalSourceMetadata": {
      "id": "QueryResultsOfExternalSourceMetadata",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "ExternalSourceMetadata"
          }
        }
      }
    },
    "ExternalSourceMetadata": {
      "id": "ExternalSourceMetadata",
      "required": false,
      "type": "object",
      "properties": {
        "End": {
          "required": true,
          "type": "string"
        },
        "Name": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Key": {
          "required": true,
          "type": "string"
        },
        "CompatibleWithSourceKeys": {
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Widgets": {
          "$ref": "Object",
          "type": "Object"
        },
        "InitialFieldValues": {
          "$ref": "Object",
          "type": "Object"
        }
      }
    },
    "SwaggerResourceListing": {
      "id": "SwaggerResourceListing",
      "type": "object",
      "properties": {
        "apiVersion": {
          "required": true,
          "type": "string"
        },
        "swaggerVersion": {
          "required": true,
          "type": "string"
        },
        "basePath": {
          "required": true,
          "type": "string"
        },
        "apis": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "SwaggerApiResource"
          }
        }
      }
    },
    "SwaggerApiResource": {
      "id": "SwaggerApiResource",
      "type": "object",
      "properties": {
        "path": {
          "required": true,
          "type": "string"
        },
        "description": {
          "required": true,
          "type": "string"
        }
      }
    },
    "QueryResultsOfSynchronizationScheduleInfo": {
      "id": "QueryResultsOfSynchronizationScheduleInfo",
      "type": "object",
      "properties": {
        "Skip": {
          "required": false,
          "type": "integer"
        },
        "Top": {
          "required": false,
          "type": "integer"
        },
        "Total": {
          "required": false,
          "type": "integer"
        },
        "Items": {
          "required": true,
          "type": "array",
          "items": {
            "$ref": "SynchronizationScheduleInfo"
          }
        }
      }
    },
    "SynchronizationScheduleInfo": {
      "id": "SynchronizationScheduleInfo",
      "required": false,
      "type": "object",
      "properties": {
        "Configuration": {
          "$ref": "SynchronizationScheduleConfiguration",
          "type": "SynchronizationScheduleConfiguration"
        },
        "Direction": {
          "required": true,
          "type": "string",
          "enum": [
            "None",
            "SourceToDestination",
            "DestinationToSource",
            "BiDirectionalDestinationFirst",
            "BiDirectionalSourceFirst"
          ]
        },
        "Scope": {
          "required": true,
          "type": "string",
          "enum": [
            "SynchronizeUpdated",
            "SynchronizeAll"
          ]
        },
        "Condition": {
          "required": true,
          "type": "string",
          "enum": [
            "AllEntities",
            "PreviouslySynchronized"
          ]
        },
        "LinkId": {
          "required": true,
          "type": "string"
        },
        "Id": {
          "required": true,
          "type": "string"
        },
        "Description": {
          "required": true,
          "type": "string"
        },
        "Enabled": {
          "required": true,
          "type": "boolean"
        },
        "IsRunning": {
          "required": true,
          "type": "boolean"
        },
        "StatusMessage": {
          "required": true,
          "type": "string"
        },
        "LastRun": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        },
        "NextRun": {
          "required": false,
          "type": "string",
          "format": "DateTime"
        }
      }
    },
    "SynchronizationScheduleConfiguration": {
      "id": "SynchronizationScheduleConfiguration",
      "required": false,
      "type": "object",
      "properties": {
        "PeriodInMinutes": {
          "required": false,
          "type": "integer"
        },
        "Type": {
          "required": true,
          "type": "string",
          "enum": [
            "AdHoc",
            "OnChange",
            "Periodic",
            "Daily",
            "Weekly",
            "Monthly",
            "Manual"
          ]
        },
        "HourOfDay": {
          "required": false,
          "type": "integer"
        },
        "MinuteOfDay": {
          "required": false,
          "type": "integer"
        }
      }
    },
    "CreateOrUpdateSynchronizationScheduleInfo": {
      "id": "CreateOrUpdateSynchronizationScheduleInfo",
      "type": "object",
      "properties": {
        "Configuration": {
          "$ref": "SynchronizationScheduleConfiguration",
          "type": "SynchronizationScheduleConfiguration"
        },
        "Direction": {
          "required": true,
          "type": "string",
          "enum": [
            "None",
            "SourceToDestination",
            "DestinationToSource",
            "BiDirectionalDestinationFirst",
            "BiDirectionalSourceFirst"
          ]
        },
        "Scope": {
          "required": true,
          "type": "string",
          "enum": [
            "SynchronizeUpdated",
            "SynchronizeAll"
          ]
        },
        "Condition": {
          "required": true,
          "type": "string",
          "enum": [
            "AllEntities",
            "PreviouslySynchronized"
          ]
        },
        "Id": {
          "type": "string"
        },
        "LinkId": {
          "type": "string"
        },
        "Enabled": {
          "required": true,
          "type": "boolean"
        }
      }
    }
  }
}